// Code generated by tools/genCURD. DO NOT EDIT.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: taskService.gen.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskCURD_AddTask_FullMethodName         = "/api.taskCURD/AddTask"
	TaskCURD_GetTaskList_FullMethodName     = "/api.taskCURD/GetTaskList"
	TaskCURD_UpdateTask_FullMethodName      = "/api.taskCURD/UpdateTask"
	TaskCURD_DelTaskByIDList_FullMethodName = "/api.taskCURD/DelTaskByIDList"
)

// TaskCURDClient is the client API for TaskCURD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// --------------------------------------------------
type TaskCURDClient interface {
	// --------------------------------------------------
	// tbl : task
	AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error)
	GetTaskList(ctx context.Context, in *GetTaskListRequest, opts ...grpc.CallOption) (*GetTaskListResponse, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error)
	DelTaskByIDList(ctx context.Context, in *DelTaskByIDListRequest, opts ...grpc.CallOption) (*Empty, error)
}

type taskCURDClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskCURDClient(cc grpc.ClientConnInterface) TaskCURDClient {
	return &taskCURDClient{cc}
}

func (c *taskCURDClient) AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTaskResponse)
	err := c.cc.Invoke(ctx, TaskCURD_AddTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskCURDClient) GetTaskList(ctx context.Context, in *GetTaskListRequest, opts ...grpc.CallOption) (*GetTaskListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskListResponse)
	err := c.cc.Invoke(ctx, TaskCURD_GetTaskList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskCURDClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaskResponse)
	err := c.cc.Invoke(ctx, TaskCURD_UpdateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskCURDClient) DelTaskByIDList(ctx context.Context, in *DelTaskByIDListRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, TaskCURD_DelTaskByIDList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskCURDServer is the server API for TaskCURD service.
// All implementations must embed UnimplementedTaskCURDServer
// for forward compatibility.
//
// --------------------------------------------------
type TaskCURDServer interface {
	// --------------------------------------------------
	// tbl : task
	AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error)
	GetTaskList(context.Context, *GetTaskListRequest) (*GetTaskListResponse, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error)
	DelTaskByIDList(context.Context, *DelTaskByIDListRequest) (*Empty, error)
	mustEmbedUnimplementedTaskCURDServer()
}

// UnimplementedTaskCURDServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskCURDServer struct{}

func (UnimplementedTaskCURDServer) AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedTaskCURDServer) GetTaskList(context.Context, *GetTaskListRequest) (*GetTaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskList not implemented")
}
func (UnimplementedTaskCURDServer) UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedTaskCURDServer) DelTaskByIDList(context.Context, *DelTaskByIDListRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTaskByIDList not implemented")
}
func (UnimplementedTaskCURDServer) mustEmbedUnimplementedTaskCURDServer() {}
func (UnimplementedTaskCURDServer) testEmbeddedByValue()                  {}

// UnsafeTaskCURDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskCURDServer will
// result in compilation errors.
type UnsafeTaskCURDServer interface {
	mustEmbedUnimplementedTaskCURDServer()
}

func RegisterTaskCURDServer(s grpc.ServiceRegistrar, srv TaskCURDServer) {
	// If the following call pancis, it indicates UnimplementedTaskCURDServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskCURD_ServiceDesc, srv)
}

func _TaskCURD_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskCURDServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskCURD_AddTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskCURDServer).AddTask(ctx, req.(*AddTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskCURD_GetTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskCURDServer).GetTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskCURD_GetTaskList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskCURDServer).GetTaskList(ctx, req.(*GetTaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskCURD_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskCURDServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskCURD_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskCURDServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskCURD_DelTaskByIDList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTaskByIDListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskCURDServer).DelTaskByIDList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskCURD_DelTaskByIDList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskCURDServer).DelTaskByIDList(ctx, req.(*DelTaskByIDListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskCURD_ServiceDesc is the grpc.ServiceDesc for TaskCURD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskCURD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.taskCURD",
	HandlerType: (*TaskCURDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTask",
			Handler:    _TaskCURD_AddTask_Handler,
		},
		{
			MethodName: "GetTaskList",
			Handler:    _TaskCURD_GetTaskList_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _TaskCURD_UpdateTask_Handler,
		},
		{
			MethodName: "DelTaskByIDList",
			Handler:    _TaskCURD_DelTaskByIDList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "taskService.gen.proto",
}
