// Code generated by tools/genCURD. DO NOT EDIT.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: z_schoolService.gen.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SchoolCURD_AddCourseSwapRequest_FullMethodName         = "/api.schoolCURD/AddCourseSwapRequest"
	SchoolCURD_GetCourseSwapRequestList_FullMethodName     = "/api.schoolCURD/GetCourseSwapRequestList"
	SchoolCURD_UpdateCourseSwapRequest_FullMethodName      = "/api.schoolCURD/UpdateCourseSwapRequest"
	SchoolCURD_DelCourseSwapRequestByIDList_FullMethodName = "/api.schoolCURD/DelCourseSwapRequestByIDList"
)

// SchoolCURDClient is the client API for SchoolCURD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// --------------------------------------------------
type SchoolCURDClient interface {
	// --------------------------------------------------
	// tbl : course_swap_request
	AddCourseSwapRequest(ctx context.Context, in *AddCourseSwapRequestRequest, opts ...grpc.CallOption) (*AddCourseSwapRequestResponse, error)
	GetCourseSwapRequestList(ctx context.Context, in *GetCourseSwapRequestListRequest, opts ...grpc.CallOption) (*GetCourseSwapRequestListResponse, error)
	UpdateCourseSwapRequest(ctx context.Context, in *UpdateCourseSwapRequestRequest, opts ...grpc.CallOption) (*UpdateCourseSwapRequestResponse, error)
	DelCourseSwapRequestByIDList(ctx context.Context, in *DelCourseSwapRequestByIDListRequest, opts ...grpc.CallOption) (*Empty, error)
}

type schoolCURDClient struct {
	cc grpc.ClientConnInterface
}

func NewSchoolCURDClient(cc grpc.ClientConnInterface) SchoolCURDClient {
	return &schoolCURDClient{cc}
}

func (c *schoolCURDClient) AddCourseSwapRequest(ctx context.Context, in *AddCourseSwapRequestRequest, opts ...grpc.CallOption) (*AddCourseSwapRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCourseSwapRequestResponse)
	err := c.cc.Invoke(ctx, SchoolCURD_AddCourseSwapRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolCURDClient) GetCourseSwapRequestList(ctx context.Context, in *GetCourseSwapRequestListRequest, opts ...grpc.CallOption) (*GetCourseSwapRequestListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCourseSwapRequestListResponse)
	err := c.cc.Invoke(ctx, SchoolCURD_GetCourseSwapRequestList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolCURDClient) UpdateCourseSwapRequest(ctx context.Context, in *UpdateCourseSwapRequestRequest, opts ...grpc.CallOption) (*UpdateCourseSwapRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCourseSwapRequestResponse)
	err := c.cc.Invoke(ctx, SchoolCURD_UpdateCourseSwapRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolCURDClient) DelCourseSwapRequestByIDList(ctx context.Context, in *DelCourseSwapRequestByIDListRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SchoolCURD_DelCourseSwapRequestByIDList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchoolCURDServer is the server API for SchoolCURD service.
// All implementations must embed UnimplementedSchoolCURDServer
// for forward compatibility.
//
// --------------------------------------------------
type SchoolCURDServer interface {
	// --------------------------------------------------
	// tbl : course_swap_request
	AddCourseSwapRequest(context.Context, *AddCourseSwapRequestRequest) (*AddCourseSwapRequestResponse, error)
	GetCourseSwapRequestList(context.Context, *GetCourseSwapRequestListRequest) (*GetCourseSwapRequestListResponse, error)
	UpdateCourseSwapRequest(context.Context, *UpdateCourseSwapRequestRequest) (*UpdateCourseSwapRequestResponse, error)
	DelCourseSwapRequestByIDList(context.Context, *DelCourseSwapRequestByIDListRequest) (*Empty, error)
	mustEmbedUnimplementedSchoolCURDServer()
}

// UnimplementedSchoolCURDServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSchoolCURDServer struct{}

func (UnimplementedSchoolCURDServer) AddCourseSwapRequest(context.Context, *AddCourseSwapRequestRequest) (*AddCourseSwapRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCourseSwapRequest not implemented")
}
func (UnimplementedSchoolCURDServer) GetCourseSwapRequestList(context.Context, *GetCourseSwapRequestListRequest) (*GetCourseSwapRequestListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseSwapRequestList not implemented")
}
func (UnimplementedSchoolCURDServer) UpdateCourseSwapRequest(context.Context, *UpdateCourseSwapRequestRequest) (*UpdateCourseSwapRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourseSwapRequest not implemented")
}
func (UnimplementedSchoolCURDServer) DelCourseSwapRequestByIDList(context.Context, *DelCourseSwapRequestByIDListRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCourseSwapRequestByIDList not implemented")
}
func (UnimplementedSchoolCURDServer) mustEmbedUnimplementedSchoolCURDServer() {}
func (UnimplementedSchoolCURDServer) testEmbeddedByValue()                    {}

// UnsafeSchoolCURDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchoolCURDServer will
// result in compilation errors.
type UnsafeSchoolCURDServer interface {
	mustEmbedUnimplementedSchoolCURDServer()
}

func RegisterSchoolCURDServer(s grpc.ServiceRegistrar, srv SchoolCURDServer) {
	// If the following call pancis, it indicates UnimplementedSchoolCURDServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SchoolCURD_ServiceDesc, srv)
}

func _SchoolCURD_AddCourseSwapRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCourseSwapRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolCURDServer).AddCourseSwapRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolCURD_AddCourseSwapRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolCURDServer).AddCourseSwapRequest(ctx, req.(*AddCourseSwapRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolCURD_GetCourseSwapRequestList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseSwapRequestListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolCURDServer).GetCourseSwapRequestList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolCURD_GetCourseSwapRequestList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolCURDServer).GetCourseSwapRequestList(ctx, req.(*GetCourseSwapRequestListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolCURD_UpdateCourseSwapRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourseSwapRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolCURDServer).UpdateCourseSwapRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolCURD_UpdateCourseSwapRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolCURDServer).UpdateCourseSwapRequest(ctx, req.(*UpdateCourseSwapRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolCURD_DelCourseSwapRequestByIDList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCourseSwapRequestByIDListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolCURDServer).DelCourseSwapRequestByIDList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchoolCURD_DelCourseSwapRequestByIDList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolCURDServer).DelCourseSwapRequestByIDList(ctx, req.(*DelCourseSwapRequestByIDListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchoolCURD_ServiceDesc is the grpc.ServiceDesc for SchoolCURD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchoolCURD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.schoolCURD",
	HandlerType: (*SchoolCURDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCourseSwapRequest",
			Handler:    _SchoolCURD_AddCourseSwapRequest_Handler,
		},
		{
			MethodName: "GetCourseSwapRequestList",
			Handler:    _SchoolCURD_GetCourseSwapRequestList_Handler,
		},
		{
			MethodName: "UpdateCourseSwapRequest",
			Handler:    _SchoolCURD_UpdateCourseSwapRequest_Handler,
		},
		{
			MethodName: "DelCourseSwapRequestByIDList",
			Handler:    _SchoolCURD_DelCourseSwapRequestByIDList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "z_schoolService.gen.proto",
}
