package main

import (
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/pancake-lee/pgo/pkg/logger"
	"github.com/pancake-lee/pgo/pkg/util"
)

// 生成 curd 的 dao 代码
const daoTplPath = "internal/abandonCodeService/data/dao_AbandonCode.go"

func genDaoCode(
	tblToSvrMap map[string]*Table,
	tplTable *Table,
) {
	daoTplBytes, err := os.ReadFile(daoTplPath)
	if err != nil {
		log.Fatalf("read tpl file failed, err: %v", err)
	}

	for _, tbl := range tblToSvrMap {
		logger.Debugf("gen dao code for tbl[%v]", tbl.Model.TableName())

		daoTplCode := string(daoTplBytes)

		daoCodeStr := `// Code generated by tools/genCURD. DO NOT EDIT.` + "\n\n"

		daoCodeStr += daoReplace(daoTplCode, tplTable, tbl)

		daoOutputPath := fmt.Sprintf("./internal/%vService/data/", tbl.ServiceName)
		os.MkdirAll(daoOutputPath, 0755)
		err := os.WriteFile(daoOutputPath+"z_dao_"+tbl.UpperCamelName+".gen.go", []byte(daoCodeStr), 0644)
		if err != nil {
			log.Fatalf("write dao code failed, err: %v", err)
		}
	}
}

func daoReplace(codeStr string, tplTable *Table, tbl *Table) string {

	// 如果没有主键，则删除相关代码块
	if tbl.IdxColName == "" {
		codeStr = markPairTool.ReplaceAll("MARK REMOVE IF NO PRIMARY KEY", codeStr, "")
	} else {
		codeStr = markPairTool.RemoveMarkSelf("MARK REMOVE IF NO PRIMARY KEY", codeStr)
		codeStr = tblIdxReplace(codeStr, tplTable, tbl)
	}

	return tblNameReplace(codeStr, tplTable, tbl)
}

// ------------------------------------------------------------
func tblIdxReplace(codeStr string, tplTable *Table, tbl *Table) string {
	// 替换主键的字段名，参数名，参数类型
	codeStr = strings.ReplaceAll(codeStr,
		tplTable.IdxColName, util.StrIdToLower(tbl.IdxColName))

	codeStr = strings.ReplaceAll(codeStr,
		tplTable.IdxColType, tbl.IdxColType)

	codeStr = strings.ReplaceAll(codeStr,
		tplTable.IdxParmName, tbl.IdxParmName)

	return codeStr
}

func tblNameReplace(codeStr string, tplTable *Table, tbl *Table) string {
	// 把表名的4种命名方式都替换一遍
	codeStr = strings.ReplaceAll(codeStr,
		tplTable.Model.TableName(), tbl.Model.TableName())

	codeStr = strings.ReplaceAll(codeStr,
		tplTable.HyphenName, tbl.HyphenName)

	codeStr = strings.ReplaceAll(codeStr,
		tplTable.LowerCamelName, tbl.LowerCamelName)

	codeStr = strings.ReplaceAll(codeStr,
		tplTable.UpperCamelName, tbl.UpperCamelName)

	return codeStr
}
