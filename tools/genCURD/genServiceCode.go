package main

import (
	"fmt"
	"gogogo/pkg/util"
	"log"
	"os"
	"strings"
)

// 生成 curd 的 service 代码，包括 DO 和 DTO 的转换代码，基础 curd 的实现
const daoSvrPath = "internal/abandonCodeService/service/svc_AbandonCode.go"

func genServiceCode(
	tblToSvrMap map[string]*Table,
	tplTable *Table,
) {
	//以service指定目录，以table指定文件名
	svcNameToTblMap := make(map[string][]*Table)
	for _, tbl := range tblToSvrMap {
		svcNameToTblMap[tbl.ServiceName] = append(svcNameToTblMap[tbl.ServiceName], tbl)
	}

	ctlTplBytes, err := os.ReadFile(daoSvrPath)
	if err != nil {
		log.Fatalf("read tpl file failed, err: %v", err)
	}
	ctlTpl := string(ctlTplBytes)

	// 每个表写一个文件
	for svcName, tblList := range svcNameToTblMap {
		ctlOutputPath := fmt.Sprintf("./internal/%vService/service/", svcName)
		os.MkdirAll(ctlOutputPath, 0755)

		for _, tbl := range tblList {
			genServiceCodeForOneTable(ctlTpl, tplTable, tbl, ctlOutputPath)
		}
	}
}
func genServiceCodeForOneTable(
	ctlTpl string,
	tplTable *Table, tbl *Table,
	ctlOutputPath string,
) {
	log.Printf("gen svr code for tbl[%v]", tbl.Model.TableName())

	svcCodeStr := `// Code generated by tools/genCURD. DO NOT EDIT.` + "\n\n"
	svcCodeStr += svcReplace(ctlTpl, tplTable, tbl)

	// --------------------------------------------------
	// 当前处理的表名正是服务模块名时，才需要Server定义
	// 否则删掉Server定义代码
	if tbl.ServiceName != tbl.LowerCamelName {
		svcCodeStr = markPairTool.ReplaceAll("MARK REPLACE SvrDefine", svcCodeStr, "")
	}

	// --------------------------------------------------
	// 生成do和dto的双向赋值代码
	do2dtoCode := ""
	for _, field := range tbl.FieldList {
		do2dtoCode += fmt.Sprintf(
			"        %v: do.%v,\n",
			util.StrToCamelCase(util.StrIdToLower(field.Name)),
			util.StrToCamelCase(field.Name))
	}
	svcCodeStr = markPairTool.ReplaceAll("MARK REPLACE DO2DTO", svcCodeStr, do2dtoCode)

	dto2doCode := ""
	for _, field := range tbl.FieldList {
		dto2doCode += fmt.Sprintf(
			"        %v: dto.%v,\n",
			util.StrToCamelCase(field.Name),
			util.StrToCamelCase(util.StrIdToLower(field.Name)))
	}
	svcCodeStr = markPairTool.ReplaceAll("MARK REPLACE DTO2DO", svcCodeStr, dto2doCode)

	// --------------------------------------------------
	err := os.WriteFile(ctlOutputPath+"svc_"+tbl.LowerCamelName+".gen.go", []byte(svcCodeStr), 0644)
	if err != nil {
		log.Fatalf("write dao code failed, err: %v", err)
	}
}

func svcReplace(
	codeStr string, tplTable *Table, tbl *Table,
) string {

	// 如果没有主键，则删除相关代码块
	if tbl.IdxColName == "" {
		codeStr = markPairTool.ReplaceAll("MARK REMOVE IF NO PRIMARY KEY", codeStr, "")
	} else {
		codeStr = markPairTool.RemoveMarkSelf("MARK REMOVE IF NO PRIMARY KEY", codeStr)
		codeStr = tblIdxReplace(codeStr, tplTable, tbl)
	}

	// 因为service和table是一对多的关系
	// 所以要先替换了service这个维度的代码
	// 否则会被当做表名被替换掉
	// TODO 如何让CURDServer和Service不写死
	codeStr = strings.ReplaceAll(codeStr,
		util.StrToCamelCase(tplTable.ServiceName)+"CURDServer",
		util.StrToCamelCase(tbl.ServiceName)+"CURDServer")

	codeStr = strings.ReplaceAll(codeStr,
		tplTable.ServiceName+"Service",
		tbl.ServiceName+"Service")

	return tblNameReplace(codeStr, tplTable, tbl)
}
