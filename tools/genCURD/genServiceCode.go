package main

import (
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/pancake-lee/pgo/pkg/plogger"
	"github.com/pancake-lee/pgo/pkg/putil"
)

// 生成 curd 的 service 代码，包括 DO 和 DTO 的转换代码，基础 curd 的实现
const svcTplPath = "internal/abandonCodeService/service/svc_AbandonCode.go"
const svrTplPath = "internal/abandonCodeService/service/svr_AbandonCode.go"

func genServiceCode(
	tblMap map[string]*Table,
	tplTable *Table,
) {
	//以service指定目录，以table指定文件名
	svcNameToTblMap := make(map[string][]*Table)
	for _, tbl := range tblMap {
		svcNameToTblMap[tbl.ServiceName] = append(svcNameToTblMap[tbl.ServiceName], tbl)
	}
	// --------------------------------------------------
	// 写grpc-server代码
	svrTplBytes, err := os.ReadFile(svrTplPath)
	if err != nil {
		log.Fatalf("read tpl file failed, err: %v", err)
	}
	svrTpl := string(svrTplBytes)
	for svcName := range svcNameToTblMap {
		svrOutputPath := fmt.Sprintf("./internal/%vService/service/", svcName)
		os.MkdirAll(svrOutputPath, 0755)
		genServerCode(svrTpl, tplTable.ServiceName,
			svcName, svrOutputPath+"z_svr_"+svcName+".gen.go")
	}

	// --------------------------------------------------
	// 写service层每个表的curd代码
	ctlTplBytes, err := os.ReadFile(svcTplPath)
	if err != nil {
		log.Fatalf("read tpl file failed, err: %v", err)
	}
	ctlTpl := string(ctlTplBytes)

	// 每个表写一个文件
	for svcName, tblList := range svcNameToTblMap {
		ctlOutputPath := fmt.Sprintf("./internal/%vService/service/", svcName)
		os.MkdirAll(ctlOutputPath, 0755)
		for _, tbl := range tblList {
			genServiceCodeForOneTable(ctlTpl, tplTable, tbl, ctlOutputPath)
		}
	}
}

func genServerCode(
	svrTpl string,
	tplSvcName, dstSvcName string,
	svrOutputPath string,
) {
	plogger.Debugf("gen svr code for svr[%v]", dstSvcName)

	svcCodeStr := `// Code generated by tools/genCURD. DO NOT EDIT.` + "\n\n"

	svcCodeStr += svcNameReplace(svrTpl,
		tplSvcName, dstSvcName)

	// --------------------------------------------------
	err := os.WriteFile(svrOutputPath, []byte(svcCodeStr), 0644)
	if err != nil {
		log.Fatalf("write dao code failed, err: %v", err)
	}
}

func genServiceCodeForOneTable(
	ctlTpl string,
	tplTable *Table, tbl *Table,
	ctlOutputPath string,
) {
	plogger.Debugf("gen svr code for tbl[%v]", tbl.Model.TableName())

	svcCodeStr := `// Code generated by tools/genCURD. DO NOT EDIT.` + "\n\n"
	svcCodeStr += svcReplace(ctlTpl, tplTable, tbl)

	var importPkgList []string
	// --------------------------------------------------
	// 生成do和dto的双向赋值代码
	do2dtoCode := ""
	for _, field := range tbl.FieldList {
		// TODO 示例所有数据库类型，并且以替换的形式处理，而不是“生成固定代码”
		switch field.Type.String() {
		case "time.Time":
			do2dtoCode += fmt.Sprintf(
				"        %v: do.%v.Unix(),\n",
				putil.StrToCamelCase(putil.StrIdToLower(field.Name)),
				putil.StrToCamelCase(field.Name))
			importPkgList = append(importPkgList, "time")
		default:
			do2dtoCode += fmt.Sprintf(
				"        %v: do.%v,\n",
				putil.StrToCamelCase(putil.StrIdToLower(field.Name)),
				putil.StrToCamelCase(field.Name))
		}
	}

	svcCodeStr = markPairTool.ReplaceAll("MARK REPLACE DO2DTO", svcCodeStr, do2dtoCode)

	dto2doCode := ""
	for _, field := range tbl.FieldList {
		switch field.Type.String() {
		case "time.Time":
			dto2doCode += fmt.Sprintf(
				"        %v: time.Unix(dto.%v, 0),\n",
				putil.StrToCamelCase(field.Name),
				putil.StrToCamelCase(putil.StrIdToLower(field.Name)))
		default:
			dto2doCode += fmt.Sprintf(
				"        %v: dto.%v,\n",
				putil.StrToCamelCase(field.Name),
				putil.StrToCamelCase(putil.StrIdToLower(field.Name)))
		}

	}
	svcCodeStr = markPairTool.ReplaceAll("MARK REPLACE DTO2DO", svcCodeStr, dto2doCode)

	// --------------------------------------------------
	importPkgList = putil.StrListUnique(importPkgList)
	importCode := ""
	for _, pkg := range importPkgList {
		importCode += fmt.Sprintf("import \"%v\"\n", pkg)
	}
	svcCodeStr = markPairTool.ReplaceAll("MARK REPLACE IMPORT", svcCodeStr, importCode)

	// --------------------------------------------------
	err := os.WriteFile(ctlOutputPath+"z_svc_"+tbl.LowerCamelName+".gen.go", []byte(svcCodeStr), 0644)
	if err != nil {
		log.Fatalf("write dao code failed, err: %v", err)
	}
}

func svcReplace(
	codeStr string, tplTable *Table, tbl *Table,
) string {

	// 如果没有主键，则删除相关代码块
	if tbl.IdxColName == "" {
		codeStr = markPairTool.ReplaceAll("MARK REMOVE IF NO PRIMARY KEY", codeStr, "")
	} else {
		codeStr = markPairTool.RemoveMarkSelf("MARK REMOVE IF NO PRIMARY KEY", codeStr)
		codeStr = tblIdxReplace(codeStr, tplTable, tbl)
	}
	codeStr = svcNameReplace(codeStr,
		tplTable.ServiceName, tbl.ServiceName)

	return tblNameReplace(codeStr, tplTable, tbl)
}
func svcNameReplace(codeStr, tplSvcName, dstSvcName string) string {
	// 因为service和table是一对多的关系
	// 所以要先替换了service这个维度的代码
	// 否则会被当做表名被替换掉
	// TODO 如何让CURDServer和Service不写死
	codeStr = strings.ReplaceAll(codeStr,
		putil.StrToCamelCase(tplSvcName)+"CURDServer",
		putil.StrToCamelCase(dstSvcName)+"CURDServer")

	codeStr = strings.ReplaceAll(codeStr,
		putil.StrToCamelCase(tplSvcName)+"CURDHTTPServer",
		putil.StrToCamelCase(dstSvcName)+"CURDHTTPServer")

	codeStr = strings.ReplaceAll(codeStr,
		tplSvcName+"Service",
		dstSvcName+"Service")

	return codeStr
}
