package main

import (
	"flag"
	"fmt"
	"gogogo/pkg/config"
	"gogogo/pkg/db/dao/model"
	"gogogo/pkg/util"
	"log"
	"os"
	"reflect"
	"strings"
)

type dbModel interface {
	TableName() string
}

type Table struct {
	ServiceName string
	Model       dbModel

	//生成代码需要的值
	LowerCamelName string // 驼峰命名，首字母小写
	UpperCamelName string // 驼峰命名，首字母大写

	IdxColName  string // 索引列名，model字段名
	IdxColType  string // 索引列类型，model字段类型
	IdxParmName string // 索引列名，读写值的参数名

}

func (t *Table) String() string {
	return "ServiceName[" + t.ServiceName + "]" +
		" Model[" + t.Model.TableName() + "]" +
		" LowerCamelName[" + t.LowerCamelName + "]" +
		" UpperCamelName[" + t.UpperCamelName + "]" +
		" IdxColName[" + t.IdxColName + "]" +
		" IdxColType[" + t.IdxColType + "]" +
		" IdxParmName[" + t.IdxParmName + "]"
}

var tblToSvrMap = make(map[string]*Table)

func addTable(m dbModel, svrName string) {
	tblToSvrMap[m.TableName()] = &Table{
		ServiceName: svrName,
		Model:       m,
	}
}

func main() {
	var err error

	var confPath string
	flag.StringVar(&confPath, "conf", "configs/config.ini", "config path, eg: -conf config.yaml")
	flag.Parse()

	config.LoadConf(confPath)

	addTable(&model.User{}, "userService")
	addTable(&model.UserDept{}, "userService")
	addTable(&model.UserDeptAssoc{}, "userService")
	addTable(&model.UserJob{}, "userService")

	//1: 读取数据库表结构
	for _, tbl := range tblToSvrMap {
		log.Printf("table: %v", tbl.Model.TableName())
		tblName := tbl.Model.TableName()
		tbl.UpperCamelName = util.StrToCamelCase(tblName)
		tbl.LowerCamelName = util.StrFirstToLower(tbl.UpperCamelName)

		val := reflect.ValueOf(tbl.Model).Elem()
		for i := 0; i < val.NumField(); i++ {
			field := val.Type().Field(i)
			// log.Printf("Field[%s] Type[%s] Tag[%v]", field.Name, field.Type, field.Tag)
			if tbl.IdxColName == "" &&
				strings.Contains(field.Tag.Get("gorm"), "primaryKey") {
				tbl.IdxColName = field.Name
				tbl.IdxColType = field.Type.String()
				tbl.IdxParmName = util.StrFirstToLower(util.StrIdToLower(tbl.IdxColName))
			}
		}
		log.Println("tbl info : ", tbl)
	}

	//2: 读取模板文件
	daoTplBytes, err := os.ReadFile("tools/genCURD/AbandonCode.go")
	if err != nil {
		log.Fatalf("read tpl file failed, err: %v", err)
	}

	daoIdxTplBytes, err := os.ReadFile("tools/genCURD/AbandonCodeIdx.go")
	if err != nil {
		log.Fatalf("read tpl file failed, err: %v", err)
	}

	tplTable := Table{
		ServiceName:    "",
		Model:          &model.AbandonCode{},
		LowerCamelName: "abandonCode",
		UpperCamelName: "AbandonCode",
		IdxColName:     "Idx1",
		IdxColType:     "int32",
		IdxParmName:    "idx1",
	}

	//3: 生成代码
	// daoOutputPath := "./tools/genCURD/gen/"
	// os.MkdirAll(daoOutputPath, 0755)

	for _, tbl := range tblToSvrMap {
		daoOutputPath := fmt.Sprintf("./internal/%v/data/", tbl.ServiceName)
		os.MkdirAll(daoOutputPath, 0755)

		//3.1: 生成 curd 的 dao 代码

		daoCodeStr := `// Code generated by tools/genCURD. DO NOT EDIT.` + "\n\n"

		daoCodeStr += string(daoTplBytes)
		if tbl.IdxColName != "" {
			daoIdxCodeStr := string(daoIdxTplBytes)
			i := strings.Index(daoIdxCodeStr, "ignore above this line")
			ii := strings.Index(daoIdxCodeStr[i:], "\n")
			daoIdxCodeStr = daoIdxCodeStr[i+ii+1:]
			daoCodeStr += daoIdxCodeStr
		}
		daoCodeStr = strings.ReplaceAll(daoCodeStr, "package main", "package data")
		daoCodeStr = strings.ReplaceAll(daoCodeStr, tplTable.LowerCamelName, tbl.LowerCamelName)
		daoCodeStr = strings.ReplaceAll(daoCodeStr, tplTable.UpperCamelName, tbl.UpperCamelName)
		daoCodeStr = strings.ReplaceAll(daoCodeStr, tplTable.IdxColName, tbl.IdxColName)
		daoCodeStr = strings.ReplaceAll(daoCodeStr, tplTable.IdxColType, tbl.IdxColType)
		daoCodeStr = strings.ReplaceAll(daoCodeStr, tplTable.IdxParmName, tbl.IdxParmName)
		err = os.WriteFile(daoOutputPath+tbl.UpperCamelName+".gen.go", []byte(daoCodeStr), 0644)
		if err != nil {
			log.Fatalf("write dao code failed, err: %v", err)
		}
		//3.2: 生成 curd 的 proto 定义，包括数据结构和接口定义
		//3.3: 调用 protoc 生成 go 代码
		//3.4: 生成 curd 的 service 代码，包括 DO 和 DTO 的转换代码，基础 curd 的实现
	}
}
