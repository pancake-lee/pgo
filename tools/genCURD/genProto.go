package main

import (
	"fmt"
	"gogogo/pkg/util"
	"log"
	"os"
	"sort"
	"strings"
)

// 生成 curd 的 proto 定义，包括数据结构和接口定义
const pbTplPath = "pkg/proto/AbandonCode.proto"

func genProto(
	tblToSvrMap map[string]*Table,
	tplTable *Table,
) {
	//以service为单位生成proto文件
	svcNameToTblMap := make(map[string][]*Table)
	for _, tbl := range tblToSvrMap {
		svcNameToTblMap[tbl.ServiceName] = append(svcNameToTblMap[tbl.ServiceName], tbl)
	}

	pbTplBytes, err := os.ReadFile(pbTplPath)
	if err != nil {
		log.Fatalf("read tpl file failed, err: %v", err)
	}

	pbTpl := string(pbTplBytes)
	pbTplApiForOneTbl := getMarkContent(pbTpl, "MARK REPEAT API")
	pbTplMsgForOneTbl := getMarkContent(pbTpl, "MARK REPEAT MSG")

	for svcName, tblList := range svcNameToTblMap {

		pbCodeApi := ""
		pbCodeMsg := ""

		sort.Slice(tblList, func(i, j int) bool {
			return tblList[i].Model.TableName() < tblList[j].Model.TableName()
		})
		for _, tbl := range tblList {
			log.Printf("gen pb code for tbl[%v]", tbl.Model.TableName())

			pbApiCodeForOneTbl := codeReplace(pbTplApiForOneTbl, tplTable, tbl)
			pbCodeApi += pbApiCodeForOneTbl

			pbMsgCodeForOneTbl := codeReplace(pbTplMsgForOneTbl, tplTable, tbl)

			pbColList := ""
			for i, field := range tbl.FieldList {
				pbColList += fmt.Sprintf(
					"    %v %v = %v;\n",
					field.Type.String(),
					util.StrFirstToLower(util.StrIdToLower(field.Name)),
					i+1)
			}

			pbMsgCodeForOneTbl = replaceMarkAll("MARK REPLACE PB COL",
				pbMsgCodeForOneTbl, pbColList)

			//TODO 扩展多个索引的情况
			pbKeyColList := ""
			if tbl.IdxColName != "" {
				pbKeyColList = fmt.Sprintf(
					"    repeated %v %vList = 1;\n",
					tbl.IdxColType,
					util.StrFirstToLower(util.StrIdToLower(tbl.IdxColName)))
			}
			pbMsgCodeForOneTbl = replaceMarkAll("MARK REPLACE PB IDX",
				pbMsgCodeForOneTbl, pbKeyColList)

			pbCodeMsg += pbMsgCodeForOneTbl
		}

		pbCodeStr := `// Code generated by tools/genCURD. DO NOT EDIT.` + "\n\n"
		pbCodeStr += pbTpl
		pbCodeStr = strings.ReplaceAll(pbCodeStr,
			tplTable.ServiceName, svcName)
		pbCodeStr = replaceMarkOnce("MARK REPEAT API", pbCodeStr, pbCodeApi)
		pbCodeStr = replaceMarkOnce("MARK REPEAT MSG", pbCodeStr, pbCodeMsg)

		pbOutputPath := "./pkg/proto/"
		os.MkdirAll(pbOutputPath, 0755)
		err = os.WriteFile(pbOutputPath+svcName+"Service.gen.proto", []byte(pbCodeStr), 0644)
		if err != nil {
			log.Fatalf("write dao code failed, err: %v", err)
		}
	}
}
