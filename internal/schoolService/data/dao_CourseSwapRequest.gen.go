// Code generated by tools/genCURD. DO NOT EDIT.

package data

import (
	"context"
	"errors"
	"gogogo/pkg/db"
	"gogogo/pkg/db/dao/model"
)

type CourseSwapRequestDO = model.CourseSwapRequest

type courseSwapRequestDAO struct{}

var CourseSwapRequestDAO courseSwapRequestDAO

func (*courseSwapRequestDAO) Add(ctx context.Context, courseSwapRequest *CourseSwapRequestDO) error {
	if courseSwapRequest == nil {
		return errors.New("param is invalid")
	}
	q := db.GetPG().CourseSwapRequest
	err := q.WithContext(ctx).Create(courseSwapRequest)
	if err != nil {
		return err
	}
	return err
}

func (*courseSwapRequestDAO) GetAll(ctx context.Context,
) (courseSwapRequestList []*CourseSwapRequestDO, err error) {
	q := db.GetPG().CourseSwapRequest
	courseSwapRequestList, err = q.WithContext(ctx).Find()
	if err != nil {
		return nil, err
	}
	return courseSwapRequestList, nil
}


func (*courseSwapRequestDAO) DelByID(ctx context.Context, iD int32) error {
	if iD == 0 {
		return errors.New("param is invalid")
	}
	q := db.GetPG().CourseSwapRequest
	_, err := q.WithContext(ctx).Where(q.ID.Eq(iD)).Delete()
	if err != nil {
		return err
	}
	return err
}

func (*courseSwapRequestDAO) DelByIDList(ctx context.Context, iDList []int32) error {
	if len(iDList) == 0 {
		return nil
	}
	q := db.GetPG().CourseSwapRequest
	_, err := q.WithContext(ctx).
		Where(q.ID.In(iDList...)).Delete()
	if err != nil {
		return err
	}
	return err
}

func (*courseSwapRequestDAO) GetByID(ctx context.Context, iD int32,
) (courseSwapRequest *CourseSwapRequestDO, err error) {
	if iD == 0 {
		return courseSwapRequest, errors.New("param is invalid")
	}

	q := db.GetPG().CourseSwapRequest
	courseSwapRequest, err = q.WithContext(ctx).
		Where(q.ID.Eq(iD)).First()
	if err != nil {
		return nil, err
	}
	return courseSwapRequest, nil
}

func (*courseSwapRequestDAO) GetByIDList(ctx context.Context, iDList []int32,
) (courseSwapRequestMap map[int32]*CourseSwapRequestDO, err error) {
	if len(iDList) == 0 {
		return nil, nil
	}

	q := db.GetPG().CourseSwapRequest
	l, err := q.WithContext(ctx).
		Where(q.ID.In(iDList...)).Find()
	if err != nil {
		return nil, err
	}
	courseSwapRequestMap = make(map[int32]*CourseSwapRequestDO)
	for _, i := range l {
		courseSwapRequestMap[i.ID] = i
	}
	return courseSwapRequestMap, nil
}

