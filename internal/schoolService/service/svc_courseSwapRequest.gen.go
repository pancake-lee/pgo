// Code generated by tools/genCURD. DO NOT EDIT.

package service


import (
	"context"
	"pgo/internal/schoolService/data"
	"pgo/api"
)

func DO2DTO_CourseSwapRequest(do *data.CourseSwapRequestDO) *api.CourseSwapRequestInfo {
	if do == nil {
		return nil
	}
	return &api.CourseSwapRequestInfo{
        ID: do.ID,
        SrcTeacher: do.SrcTeacher,
        SrcDate: do.SrcDate,
        SrcCourseNum: do.SrcCourseNum,
        SrcCourse: do.SrcCourse,
        SrcClass: do.SrcClass,
        DstTeacher: do.DstTeacher,
        DstDate: do.DstDate,
        DstCourseNum: do.DstCourseNum,
        DstCourse: do.DstCourse,
        DstClass: do.DstClass,
        CreateTime: do.CreateTime,
        Status: do.Status,
	}
}
func DTO2DO_CourseSwapRequest(dto *api.CourseSwapRequestInfo) *data.CourseSwapRequestDO {
	if dto == nil {
		return nil
	}
	return &data.CourseSwapRequestDO{
        ID: dto.ID,
        SrcTeacher: dto.SrcTeacher,
        SrcDate: dto.SrcDate,
        SrcCourseNum: dto.SrcCourseNum,
        SrcCourse: dto.SrcCourse,
        SrcClass: dto.SrcClass,
        DstTeacher: dto.DstTeacher,
        DstDate: dto.DstDate,
        DstCourseNum: dto.DstCourseNum,
        DstCourse: dto.DstCourse,
        DstClass: dto.DstClass,
        CreateTime: dto.CreateTime,
        Status: dto.Status,
	}
}

func (s *SchoolCURDServer) AddCourseSwapRequest(
	ctx context.Context, req *api.AddCourseSwapRequestRequest,
) (resp *api.AddCourseSwapRequestResponse, err error) {
	if req.CourseSwapRequest == nil {
		return nil, api.ErrorInvalidArgument("request is invalid")
	}
	newData := DTO2DO_CourseSwapRequest(req.CourseSwapRequest)

	err = data.CourseSwapRequestDAO.Add(ctx,
		newData)
	if err != nil {
		return nil, err
	}
	resp = new(api.AddCourseSwapRequestResponse)
	resp.CourseSwapRequest = DO2DTO_CourseSwapRequest(newData)
	return resp, nil
}

func (s *SchoolCURDServer) GetCourseSwapRequestList(
	ctx context.Context, req *api.GetCourseSwapRequestListRequest,
) (resp *api.GetCourseSwapRequestListResponse, err error) {

	var dataList []*data.CourseSwapRequestDO

	if len(req.IDList) != 0 {
		dataMap, err := data.CourseSwapRequestDAO.GetByIDList(ctx, req.IDList)
		if err != nil {
			return nil, err
		}
		for _, d := range dataMap {
			dataList = append(dataList, d)
		}
	} else {

		dataList, err = data.CourseSwapRequestDAO.GetAll(ctx)
		if err != nil {
			return nil, err
		}

	}

	resp = new(api.GetCourseSwapRequestListResponse)
	resp.CourseSwapRequestList = make([]*api.CourseSwapRequestInfo, 0, len(dataList))
	for _, data := range dataList {
		resp.CourseSwapRequestList = append(resp.CourseSwapRequestList, DO2DTO_CourseSwapRequest(data))
	}
	return resp, nil
}


func (s *SchoolCURDServer) UpdateCourseSwapRequest(
	ctx context.Context, req *api.UpdateCourseSwapRequestRequest,
) (resp *api.UpdateCourseSwapRequestResponse, err error) {
	if req.CourseSwapRequest == nil {
		return nil, api.ErrorInvalidArgument("request is invalid")
	}

	do := DTO2DO_CourseSwapRequest(req.CourseSwapRequest)
	err = data.CourseSwapRequestDAO.UpdateByID(ctx, do)
	if err != nil {
		return nil, err
	}

	resp = new(api.UpdateCourseSwapRequestResponse)
	d, err := data.CourseSwapRequestDAO.GetByID(ctx, req.CourseSwapRequest.ID)
	if err != nil {
		return nil, err
	}
	resp.CourseSwapRequest = DO2DTO_CourseSwapRequest(d)
	return resp, nil
}

func (s *SchoolCURDServer) DelCourseSwapRequestByIDList(
	ctx context.Context, req *api.DelCourseSwapRequestByIDListRequest,
) (resp *api.Empty, err error) {
	if len(req.IDList) == 0 {
		return nil, nil
	}
	err = data.CourseSwapRequestDAO.DelByIDList(ctx, req.IDList)
	if err != nil {
		return nil, err
	}
	return nil, nil
}

