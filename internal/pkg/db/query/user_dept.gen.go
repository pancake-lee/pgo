// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/pancake-lee/pgo/internal/pkg/db/model"
)

func newUserDept(db *gorm.DB, opts ...gen.DOOption) userDept {
	_userDept := userDept{}

	_userDept.userDeptDo.UseDB(db, opts...)
	_userDept.userDeptDo.UseModel(&model.UserDept{})

	tableName := _userDept.userDeptDo.TableName()
	_userDept.ALL = field.NewAsterisk(tableName)
	_userDept.ID = field.NewInt32(tableName, "id")
	_userDept.DeptPath = field.NewString(tableName, "dept_path")
	_userDept.DeptName = field.NewString(tableName, "dept_name")

	_userDept.fillFieldMap()

	return _userDept
}

type userDept struct {
	userDeptDo userDeptDo

	ALL      field.Asterisk
	ID       field.Int32
	DeptPath field.String
	DeptName field.String

	fieldMap map[string]field.Expr
}

func (u userDept) Table(newTableName string) *userDept {
	u.userDeptDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userDept) As(alias string) *userDept {
	u.userDeptDo.DO = *(u.userDeptDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userDept) updateTableName(table string) *userDept {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.DeptPath = field.NewString(table, "dept_path")
	u.DeptName = field.NewString(table, "dept_name")

	u.fillFieldMap()

	return u
}

func (u *userDept) WithContext(ctx context.Context) *userDeptDo { return u.userDeptDo.WithContext(ctx) }

func (u userDept) TableName() string { return u.userDeptDo.TableName() }

func (u userDept) Alias() string { return u.userDeptDo.Alias() }

func (u userDept) Columns(cols ...field.Expr) gen.Columns { return u.userDeptDo.Columns(cols...) }

func (u *userDept) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userDept) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["id"] = u.ID
	u.fieldMap["dept_path"] = u.DeptPath
	u.fieldMap["dept_name"] = u.DeptName
}

func (u userDept) clone(db *gorm.DB) userDept {
	u.userDeptDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userDept) replaceDB(db *gorm.DB) userDept {
	u.userDeptDo.ReplaceDB(db)
	return u
}

type userDeptDo struct{ gen.DO }

func (u userDeptDo) Debug() *userDeptDo {
	return u.withDO(u.DO.Debug())
}

func (u userDeptDo) WithContext(ctx context.Context) *userDeptDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDeptDo) ReadDB() *userDeptDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDeptDo) WriteDB() *userDeptDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDeptDo) Session(config *gorm.Session) *userDeptDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDeptDo) Clauses(conds ...clause.Expression) *userDeptDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDeptDo) Returning(value interface{}, columns ...string) *userDeptDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDeptDo) Not(conds ...gen.Condition) *userDeptDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDeptDo) Or(conds ...gen.Condition) *userDeptDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDeptDo) Select(conds ...field.Expr) *userDeptDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDeptDo) Where(conds ...gen.Condition) *userDeptDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDeptDo) Order(conds ...field.Expr) *userDeptDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDeptDo) Distinct(cols ...field.Expr) *userDeptDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDeptDo) Omit(cols ...field.Expr) *userDeptDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDeptDo) Join(table schema.Tabler, on ...field.Expr) *userDeptDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDeptDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userDeptDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDeptDo) RightJoin(table schema.Tabler, on ...field.Expr) *userDeptDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDeptDo) Group(cols ...field.Expr) *userDeptDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDeptDo) Having(conds ...gen.Condition) *userDeptDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDeptDo) Limit(limit int) *userDeptDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDeptDo) Offset(offset int) *userDeptDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDeptDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userDeptDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDeptDo) Unscoped() *userDeptDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDeptDo) Create(values ...*model.UserDept) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDeptDo) CreateInBatches(values []*model.UserDept, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDeptDo) Save(values ...*model.UserDept) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDeptDo) First() (*model.UserDept, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDept), nil
	}
}

func (u userDeptDo) Take() (*model.UserDept, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDept), nil
	}
}

func (u userDeptDo) Last() (*model.UserDept, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDept), nil
	}
}

func (u userDeptDo) Find() ([]*model.UserDept, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserDept), err
}

func (u userDeptDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserDept, err error) {
	buf := make([]*model.UserDept, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDeptDo) FindInBatches(result *[]*model.UserDept, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDeptDo) Attrs(attrs ...field.AssignExpr) *userDeptDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDeptDo) Assign(attrs ...field.AssignExpr) *userDeptDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDeptDo) Joins(fields ...field.RelationField) *userDeptDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDeptDo) Preload(fields ...field.RelationField) *userDeptDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDeptDo) FirstOrInit() (*model.UserDept, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDept), nil
	}
}

func (u userDeptDo) FirstOrCreate() (*model.UserDept, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDept), nil
	}
}

func (u userDeptDo) FindByPage(offset int, limit int) (result []*model.UserDept, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDeptDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDeptDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDeptDo) Delete(models ...*model.UserDept) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDeptDo) withDO(do gen.Dao) *userDeptDo {
	u.DO = *do.(*gen.DO)
	return u
}
