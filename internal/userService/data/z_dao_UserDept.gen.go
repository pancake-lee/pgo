// Code generated by tools/genCURD. DO NOT EDIT.

package data

import (
	"context"
	"github.com/pancake-lee/pgo/internal/pkg/db"
	"github.com/pancake-lee/pgo/internal/pkg/db/model"
	"github.com/pancake-lee/pgo/internal/pkg/perr"
	"github.com/pancake-lee/pgo/pkg/plogger"
)

type UserDeptDO = model.UserDept

type userDeptDAO struct{}

var UserDeptDAO userDeptDAO

func (*userDeptDAO) Add(ctx context.Context, userDept *UserDeptDO) error {
	if userDept == nil {
		return plogger.LogErr(perr.ErrParamInvalid)
	}
	q := db.GetPG().UserDept
	err := q.WithContext(ctx).Create(userDept)
	if err != nil {
		return plogger.LogErr(err)
	}
	return nil
}

func (*userDeptDAO) GetAll(ctx context.Context,
) (userDeptList []*UserDeptDO, err error) {
	q := db.GetPG().UserDept
	userDeptList, err = q.WithContext(ctx).Find()
	if err != nil {
		return nil, plogger.LogErr(err)
	}
	return userDeptList, nil
}

func (*userDeptDAO) UpdateByID(ctx context.Context, do *UserDeptDO) error {
	if do.ID == 0 {
		return plogger.LogErr(perr.ErrParamInvalid)
	}
	q := db.GetPG().UserDept
	_, err := q.WithContext(ctx).Where(q.ID.Eq(do.ID)).Updates(do)
	if err != nil {
		return plogger.LogErr(err)
	}
	return nil
}

func (*userDeptDAO) DelByID(ctx context.Context, iD int32) error {
	if iD == 0 {
		return plogger.LogErr(perr.ErrParamInvalid)
	}
	q := db.GetPG().UserDept
	_, err := q.WithContext(ctx).Where(q.ID.Eq(iD)).Delete()
	if err != nil {
		return plogger.LogErr(err)
	}
	return nil
}

func (*userDeptDAO) DelByIDList(ctx context.Context, iDList []int32) error {
	if len(iDList) == 0 {
		return nil
	}
	q := db.GetPG().UserDept
	_, err := q.WithContext(ctx).
		Where(q.ID.In(iDList...)).Delete()
	if err != nil {
		return plogger.LogErr(err)
	}
	return nil
}

func (*userDeptDAO) GetByID(ctx context.Context, iD int32,
) (userDept *UserDeptDO, err error) {
	if iD == 0 {
		return userDept, plogger.LogErr(perr.ErrParamInvalid)
	}

	q := db.GetPG().UserDept
	userDept, err = q.WithContext(ctx).
		Where(q.ID.Eq(iD)).First()
	if err != nil {
		return nil, plogger.LogErr(err)
	}
	return userDept, nil
}

func (*userDeptDAO) GetByIDList(ctx context.Context, iDList []int32,
) (userDeptMap map[int32]*UserDeptDO, err error) {
	if len(iDList) == 0 {
		return nil, nil
	}

	q := db.GetPG().UserDept
	l, err := q.WithContext(ctx).
		Where(q.ID.In(iDList...)).Find()
	if err != nil {
		return nil, plogger.LogErr(err)
	}
	userDeptMap = make(map[int32]*UserDeptDO)
	for _, i := range l {
		userDeptMap[i.ID] = i
	}
	return userDeptMap, nil
}

