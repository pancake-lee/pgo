// Code generated by tools/genCURD. DO NOT EDIT.

package data

import (
	"context"
	"errors"
	"pgo/internal/pkg/db"
	"pgo/internal/pkg/db/model"
)

type UserJobDO = model.UserJob

type userJobDAO struct{}

var UserJobDAO userJobDAO

func (*userJobDAO) Add(ctx context.Context, userJob *UserJobDO) error {
	if userJob == nil {
		return errors.New("param is invalid")
	}
	q := db.GetPG().UserJob
	err := q.WithContext(ctx).Create(userJob)
	if err != nil {
		return err
	}
	return err
}

func (*userJobDAO) GetAll(ctx context.Context,
) (userJobList []*UserJobDO, err error) {
	q := db.GetPG().UserJob
	userJobList, err = q.WithContext(ctx).Find()
	if err != nil {
		return nil, err
	}
	return userJobList, nil
}

func (*userJobDAO) UpdateByID(ctx context.Context, do *UserJobDO) error {
	if do.ID == 0 {
		return errors.New("param is invalid")
	}
	q := db.GetPG().UserJob
	_, err := q.WithContext(ctx).Where(q.ID.Eq(do.ID)).Updates(do)
	if err != nil {
		return err
	}
	return err
}

func (*userJobDAO) DelByID(ctx context.Context, iD int32) error {
	if iD == 0 {
		return errors.New("param is invalid")
	}
	q := db.GetPG().UserJob
	_, err := q.WithContext(ctx).Where(q.ID.Eq(iD)).Delete()
	if err != nil {
		return err
	}
	return err
}

func (*userJobDAO) DelByIDList(ctx context.Context, iDList []int32) error {
	if len(iDList) == 0 {
		return nil
	}
	q := db.GetPG().UserJob
	_, err := q.WithContext(ctx).
		Where(q.ID.In(iDList...)).Delete()
	if err != nil {
		return err
	}
	return err
}

func (*userJobDAO) GetByID(ctx context.Context, iD int32,
) (userJob *UserJobDO, err error) {
	if iD == 0 {
		return userJob, errors.New("param is invalid")
	}

	q := db.GetPG().UserJob
	userJob, err = q.WithContext(ctx).
		Where(q.ID.Eq(iD)).First()
	if err != nil {
		return nil, err
	}
	return userJob, nil
}

func (*userJobDAO) GetByIDList(ctx context.Context, iDList []int32,
) (userJobMap map[int32]*UserJobDO, err error) {
	if len(iDList) == 0 {
		return nil, nil
	}

	q := db.GetPG().UserJob
	l, err := q.WithContext(ctx).
		Where(q.ID.In(iDList...)).Find()
	if err != nil {
		return nil, err
	}
	userJobMap = make(map[int32]*UserJobDO)
	for _, i := range l {
		userJobMap[i.ID] = i
	}
	return userJobMap, nil
}

