// Code generated by tools/genCURD. DO NOT EDIT.

package service

import (
	"context"
	"gogogo/internal/userService/data"
	"gogogo/pkg/proto/api"
)

// MARK REPLACE SvrDefine START
type UserCURDServer struct {
	api.UnimplementedUserCURDServer
}

// MARK REPLACE SvrDefine END

func DO2DTO_User(do *data.UserDO) *api.UserInfo {
	if do == nil {
		return nil
	}
	return &api.UserInfo{
        ID: do.ID,
        UserName: do.UserName,
	}
}
func DTO2DO_User(dto *api.UserInfo) *data.UserDO {
	if dto == nil {
		return nil
	}
	return &data.UserDO{
        ID: dto.ID,
        UserName: dto.UserName,
	}
}

func (s *UserCURDServer) AddUser(
	ctx context.Context, req *api.AddUserRequest,
) (resp *api.AddUserResponse, err error) {
	if req.User == nil {
		return nil, api.ErrorInvalidArgument("request is invalid")
	}
	newData := DTO2DO_User(req.User)

	err = data.UserDAO.Add(ctx,
		newData)
	if err != nil {
		return nil, err
	}
	resp = new(api.AddUserResponse)
	resp.User = DO2DTO_User(newData)
	return resp, nil
}

func (s *UserCURDServer) GetUserList(
	ctx context.Context, req *api.GetUserListRequest,
) (resp *api.GetUserListResponse, err error) {

	var dataList []*data.UserDO

	if len(req.IDList) != 0 {
		dataMap, err := data.UserDAO.GetByIDList(ctx, req.IDList)
		if err != nil {
			return nil, err
		}
		for _, d := range dataMap {
			dataList = append(dataList, d)
		}
	} else {

		dataList, err = data.UserDAO.GetAll(ctx)
		if err != nil {
			return nil, err
		}

	}

	resp = new(api.GetUserListResponse)
	resp.UserList = make([]*api.UserInfo, 0, len(dataList))
	for _, data := range dataList {
		resp.UserList = append(resp.UserList, DO2DTO_User(data))
	}
	return resp, nil
}

func (s *UserCURDServer) DelUserByIDList(
	ctx context.Context, req *api.DelUserByIDListRequest,
) (resp *api.Empty, err error) {
	if len(req.IDList) == 0 {
		return nil, nil
	}
	err = data.UserDAO.DelByIDList(ctx, req.IDList)
	if err != nil {
		return nil, err
	}
	return nil, nil
}

