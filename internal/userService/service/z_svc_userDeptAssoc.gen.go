// Code generated by tools/genCURD. DO NOT EDIT.

package service


import (
	"context"
	"github.com/pancake-lee/pgo/api"
	"github.com/pancake-lee/pgo/internal/userService/data"
	"github.com/pancake-lee/pgo/pkg/logger"
)

func DO2DTO_UserDeptAssoc(do *data.UserDeptAssocDO) *api.UserDeptAssocInfo {
	if do == nil {
		return nil
	}
	return &api.UserDeptAssocInfo{
        UserID: do.UserID,
        DeptID: do.DeptID,
        JobID: do.JobID,
	}
}
func DTO2DO_UserDeptAssoc(dto *api.UserDeptAssocInfo) *data.UserDeptAssocDO {
	if dto == nil {
		return nil
	}
	return &data.UserDeptAssocDO{
        UserID: dto.UserID,
        DeptID: dto.DeptID,
        JobID: dto.JobID,
	}
}

func (s *UserCURDServer) AddUserDeptAssoc(
	ctx context.Context, req *api.AddUserDeptAssocRequest,
) (resp *api.AddUserDeptAssocResponse, err error) {
	if req.UserDeptAssoc == nil {
		return nil, api.ErrorInvalidArgument("")
	}
	newData := DTO2DO_UserDeptAssoc(req.UserDeptAssoc)

	err = data.UserDeptAssocDAO.Add(ctx, newData)
	if err != nil {
		return nil, logger.LogErr(err)
	}


	resp = new(api.AddUserDeptAssocResponse)
	resp.UserDeptAssoc = DO2DTO_UserDeptAssoc(newData)
	return resp, nil
}

func (s *UserCURDServer) GetUserDeptAssocList(
	ctx context.Context, req *api.GetUserDeptAssocListRequest,
) (resp *api.GetUserDeptAssocListResponse, err error) {

	var dataList []*data.UserDeptAssocDO


		dataList, err = data.UserDeptAssocDAO.GetAll(ctx)
		if err != nil {
			return nil, logger.LogErr(err)
		}


	logger.Debugf("GetUserDeptAssocList resp len %v", len(dataList))

	resp = new(api.GetUserDeptAssocListResponse)
	resp.UserDeptAssocList = make([]*api.UserDeptAssocInfo, 0, len(dataList))
	for _, data := range dataList {
		resp.UserDeptAssocList = append(resp.UserDeptAssocList, DO2DTO_UserDeptAssoc(data))
	}
	return resp, nil
}

