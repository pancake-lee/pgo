// Code generated by tools/genCURD. DO NOT EDIT.

package service


import (
	"context"
	"pgo/internal/userService/data"
	"pgo/api"
)

func DO2DTO_UserJob(do *data.UserJobDO) *api.UserJobInfo {
	if do == nil {
		return nil
	}
	return &api.UserJobInfo{
        ID: do.ID,
        JobName: do.JobName,
	}
}
func DTO2DO_UserJob(dto *api.UserJobInfo) *data.UserJobDO {
	if dto == nil {
		return nil
	}
	return &data.UserJobDO{
        ID: dto.ID,
        JobName: dto.JobName,
	}
}

func (s *UserCURDServer) AddUserJob(
	ctx context.Context, req *api.AddUserJobRequest,
) (resp *api.AddUserJobResponse, err error) {
	if req.UserJob == nil {
		return nil, api.ErrorInvalidArgument("request is invalid")
	}
	newData := DTO2DO_UserJob(req.UserJob)

	err = data.UserJobDAO.Add(ctx,
		newData)
	if err != nil {
		return nil, err
	}
	resp = new(api.AddUserJobResponse)
	resp.UserJob = DO2DTO_UserJob(newData)
	return resp, nil
}

func (s *UserCURDServer) GetUserJobList(
	ctx context.Context, req *api.GetUserJobListRequest,
) (resp *api.GetUserJobListResponse, err error) {

	var dataList []*data.UserJobDO

	if len(req.IDList) != 0 {
		dataMap, err := data.UserJobDAO.GetByIDList(ctx, req.IDList)
		if err != nil {
			return nil, err
		}
		for _, d := range dataMap {
			dataList = append(dataList, d)
		}
	} else {

		dataList, err = data.UserJobDAO.GetAll(ctx)
		if err != nil {
			return nil, err
		}

	}

	resp = new(api.GetUserJobListResponse)
	resp.UserJobList = make([]*api.UserJobInfo, 0, len(dataList))
	for _, data := range dataList {
		resp.UserJobList = append(resp.UserJobList, DO2DTO_UserJob(data))
	}
	return resp, nil
}


func (s *UserCURDServer) UpdateUserJob(
	ctx context.Context, req *api.UpdateUserJobRequest,
) (resp *api.UpdateUserJobResponse, err error) {
	if req.UserJob == nil {
		return nil, api.ErrorInvalidArgument("request is invalid")
	}

	do := DTO2DO_UserJob(req.UserJob)
	err = data.UserJobDAO.UpdateByID(ctx, do)
	if err != nil {
		return nil, err
	}

	resp = new(api.UpdateUserJobResponse)
	d, err := data.UserJobDAO.GetByID(ctx, req.UserJob.ID)
	if err != nil {
		return nil, err
	}
	resp.UserJob = DO2DTO_UserJob(d)
	return resp, nil
}

func (s *UserCURDServer) DelUserJobByIDList(
	ctx context.Context, req *api.DelUserJobByIDListRequest,
) (resp *api.Empty, err error) {
	if len(req.IDList) == 0 {
		return nil, nil
	}
	err = data.UserJobDAO.DelByIDList(ctx, req.IDList)
	if err != nil {
		return nil, err
	}
	return nil, nil
}

