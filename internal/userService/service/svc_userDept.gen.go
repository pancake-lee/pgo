// Code generated by tools/genCURD. DO NOT EDIT.

package service

import (
	"context"
	"gogogo/internal/userService/data"
	"gogogo/pkg/proto/api"
)


func DO2DTO_UserDept(do *data.UserDeptDO) *api.UserDeptInfo {
	if do == nil {
		return nil
	}
	return &api.UserDeptInfo{
        ID: do.ID,
        DeptPath: do.DeptPath,
        DeptName: do.DeptName,
	}
}
func DTO2DO_UserDept(dto *api.UserDeptInfo) *data.UserDeptDO {
	if dto == nil {
		return nil
	}
	return &data.UserDeptDO{
        ID: dto.ID,
        DeptPath: dto.DeptPath,
        DeptName: dto.DeptName,
	}
}

func (s *UserCURDServer) AddUserDept(
	ctx context.Context, req *api.AddUserDeptRequest,
) (resp *api.AddUserDeptResponse, err error) {
	if req.UserDept == nil {
		return nil, api.ErrorInvalidArgument("request is invalid")
	}
	newData := DTO2DO_UserDept(req.UserDept)

	err = data.UserDeptDAO.Add(ctx,
		newData)
	if err != nil {
		return nil, err
	}
	resp = new(api.AddUserDeptResponse)
	resp.UserDept = DO2DTO_UserDept(newData)
	return resp, nil
}

func (s *UserCURDServer) GetUserDeptList(
	ctx context.Context, req *api.GetUserDeptListRequest,
) (resp *api.GetUserDeptListResponse, err error) {

	var dataList []*data.UserDeptDO

	if len(req.IDList) != 0 {
		dataMap, err := data.UserDeptDAO.GetByIDList(ctx, req.IDList)
		if err != nil {
			return nil, err
		}
		for _, d := range dataMap {
			dataList = append(dataList, d)
		}
	} else {

		dataList, err = data.UserDeptDAO.GetAll(ctx)
		if err != nil {
			return nil, err
		}

	}

	resp = new(api.GetUserDeptListResponse)
	resp.UserDeptList = make([]*api.UserDeptInfo, 0, len(dataList))
	for _, data := range dataList {
		resp.UserDeptList = append(resp.UserDeptList, DO2DTO_UserDept(data))
	}
	return resp, nil
}

func (s *UserCURDServer) DelUserDeptByIDList(
	ctx context.Context, req *api.DelUserDeptByIDListRequest,
) (resp *api.Empty, err error) {
	if len(req.IDList) == 0 {
		return nil, nil
	}
	err = data.UserDeptDAO.DelByIDList(ctx, req.IDList)
	if err != nil {
		return nil, err
	}
	return nil, nil
}

