// Code generated by tools/genCURD. DO NOT EDIT.

package service

import "time"

import (
	"context"
	"pgo/api"
	"pgo/internal/taskService/data"
	"pgo/pkg/logger"
)

func DO2DTO_Task(do *data.TaskDO) *api.TaskInfo {
	if do == nil {
		return nil
	}
	return &api.TaskInfo{
        ID: do.ID,
        ParentID: do.ParentID,
        PrevID: do.PrevID,
        Task: do.Task,
        Status: do.Status,
        Estimate: do.Estimate,
        Start: do.Start.Unix(),
        End: do.End.Unix(),
        Desc: do.Desc,
        Metadata: do.Metadata,
        CreateTime: do.CreateTime.Unix(),
	}
}
func DTO2DO_Task(dto *api.TaskInfo) *data.TaskDO {
	if dto == nil {
		return nil
	}
	return &data.TaskDO{
        ID: dto.ID,
        ParentID: dto.ParentID,
        PrevID: dto.PrevID,
        Task: dto.Task,
        Status: dto.Status,
        Estimate: dto.Estimate,
        Start: time.Unix(dto.Start, 0),
        End: time.Unix(dto.End, 0),
        Desc: dto.Desc,
        Metadata: dto.Metadata,
        CreateTime: time.Unix(dto.CreateTime, 0),
	}
}

func (s *TaskCURDServer) AddTask(
	ctx context.Context, req *api.AddTaskRequest,
) (resp *api.AddTaskResponse, err error) {
	if req.Task == nil {
		return nil, api.ErrorInvalidArgument("request is invalid")
	}
	newData := DTO2DO_Task(req.Task)

	err = data.TaskDAO.Add(ctx, newData)
	if err != nil {
		return nil, logger.LogErr(err)
	}

	logger.Debugf("AddTask: %v", newData.ID)

	resp = new(api.AddTaskResponse)
	resp.Task = DO2DTO_Task(newData)
	return resp, nil
}

func (s *TaskCURDServer) GetTaskList(
	ctx context.Context, req *api.GetTaskListRequest,
) (resp *api.GetTaskListResponse, err error) {

	var dataList []*data.TaskDO

	if len(req.IDList) != 0 {
		logger.Debugf("GetTaskList: %v", req.IDList)

		dataMap, err := data.TaskDAO.GetByIDList(ctx, req.IDList)
		if err != nil {
			return nil, logger.LogErr(err)
		}
		for _, d := range dataMap {
			dataList = append(dataList, d)
		}
	} else {

		dataList, err = data.TaskDAO.GetAll(ctx)
		if err != nil {
			return nil, logger.LogErr(err)
		}

	}

	logger.Debugf("GetTaskList resp len %v", len(dataList))

	resp = new(api.GetTaskListResponse)
	resp.TaskList = make([]*api.TaskInfo, 0, len(dataList))
	for _, data := range dataList {
		resp.TaskList = append(resp.TaskList, DO2DTO_Task(data))
	}
	return resp, nil
}


func (s *TaskCURDServer) UpdateTask(
	ctx context.Context, req *api.UpdateTaskRequest,
) (resp *api.UpdateTaskResponse, err error) {
	if req.Task == nil {
		return nil, api.ErrorInvalidArgument("request is invalid")
	}

	do := DTO2DO_Task(req.Task)
	err = data.TaskDAO.UpdateByID(ctx, do)
	if err != nil {
		return nil, logger.LogErr(err)
	}
	logger.Debugf("UpdateTask %v", req.Task.ID)

	resp = new(api.UpdateTaskResponse)
	d, err := data.TaskDAO.GetByID(ctx, req.Task.ID)
	if err != nil {
		return nil, logger.LogErr(err)
	}
	resp.Task = DO2DTO_Task(d)
	return resp, nil
}

func (s *TaskCURDServer) DelTaskByIDList(
	ctx context.Context, req *api.DelTaskByIDListRequest,
) (resp *api.Empty, err error) {
	if len(req.IDList) == 0 {
		return nil, nil
	}
	err = data.TaskDAO.DelByIDList(ctx, req.IDList)
	if err != nil {
		return nil, logger.LogErr(err)
	}
	logger.Debugf("DelTaskByIDList %v", req.IDList)
	return nil, nil
}

