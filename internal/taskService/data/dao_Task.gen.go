// Code generated by tools/genCURD. DO NOT EDIT.

package data

import (
	"context"
	"errors"
	"pgo/pkg/db"
	"pgo/pkg/db/dao/model"
)

type TaskDO = model.Task

type taskDAO struct{}

var TaskDAO taskDAO

func (*taskDAO) Add(ctx context.Context, task *TaskDO) error {
	if task == nil {
		return errors.New("param is invalid")
	}
	q := db.GetPG().Task
	err := q.WithContext(ctx).Create(task)
	if err != nil {
		return err
	}
	return err
}

func (*taskDAO) GetAll(ctx context.Context,
) (taskList []*TaskDO, err error) {
	q := db.GetPG().Task
	taskList, err = q.WithContext(ctx).Find()
	if err != nil {
		return nil, err
	}
	return taskList, nil
}


func (*taskDAO) DelByID(ctx context.Context, iD int32) error {
	if iD == 0 {
		return errors.New("param is invalid")
	}
	q := db.GetPG().Task
	_, err := q.WithContext(ctx).Where(q.ID.Eq(iD)).Delete()
	if err != nil {
		return err
	}
	return err
}

func (*taskDAO) DelByIDList(ctx context.Context, iDList []int32) error {
	if len(iDList) == 0 {
		return nil
	}
	q := db.GetPG().Task
	_, err := q.WithContext(ctx).
		Where(q.ID.In(iDList...)).Delete()
	if err != nil {
		return err
	}
	return err
}

func (*taskDAO) GetByID(ctx context.Context, iD int32,
) (task *TaskDO, err error) {
	if iD == 0 {
		return task, errors.New("param is invalid")
	}

	q := db.GetPG().Task
	task, err = q.WithContext(ctx).
		Where(q.ID.Eq(iD)).First()
	if err != nil {
		return nil, err
	}
	return task, nil
}

func (*taskDAO) GetByIDList(ctx context.Context, iDList []int32,
) (taskMap map[int32]*TaskDO, err error) {
	if len(iDList) == 0 {
		return nil, nil
	}

	q := db.GetPG().Task
	l, err := q.WithContext(ctx).
		Where(q.ID.In(iDList...)).Find()
	if err != nil {
		return nil, err
	}
	taskMap = make(map[int32]*TaskDO)
	for _, i := range l {
		taskMap[i.ID] = i
	}
	return taskMap, nil
}

