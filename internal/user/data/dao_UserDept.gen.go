// Code generated by tools/genCURD. DO NOT EDIT.

package data

import (
	"context"
	"errors"
	"gogogo/pkg/db"
	"gogogo/pkg/db/dao/model"
)

type UserDeptDO = model.UserDept

type userDAO struct{}

var UserDeptDAO userDAO

func (*userDAO) Add(ctx context.Context, user *UserDeptDO) error {
	if user == nil {
		return errors.New("param is invalid")
	}
	q := db.GetPG().UserDept
	err := q.WithContext(ctx).Create(user)
	if err != nil {
		return err
	}
	return err
}

func (*userDAO) GetAll(ctx context.Context,
) (userList []*UserDeptDO, err error) {
	q := db.GetPG().UserDept
	userList, err = q.WithContext(ctx).Find()
	if err != nil {
		return nil, err
	}
	return userList, nil
}


func (*userDAO) DelByID(ctx context.Context, iD int32) error {
	if iD == 0 {
		return errors.New("param is invalid")
	}
	q := db.GetPG().UserDept
	_, err := q.WithContext(ctx).Where(q.ID.Eq(iD)).Delete()
	if err != nil {
		return err
	}
	return err
}

func (*userDAO) DelByIDList(ctx context.Context, iDList []int32) error {
	if len(iDList) == 0 {
		return nil
	}
	q := db.GetPG().UserDept
	_, err := q.WithContext(ctx).
		Where(q.ID.In(iDList...)).Delete()
	if err != nil {
		return err
	}
	return err
}

func (*userDAO) GetByID(ctx context.Context, iD int32,
) (user *UserDeptDO, err error) {
	if iD == 0 {
		return user, errors.New("param is invalid")
	}

	q := db.GetPG().UserDept
	user, err = q.WithContext(ctx).
		Where(q.ID.Eq(iD)).First()
	if err != nil {
		return nil, err
	}
	return user, nil
}

func (*userDAO) GetByIDList(ctx context.Context, iDList []int32,
) (userMap map[int32]*UserDeptDO, err error) {
	if len(iDList) == 0 {
		return nil, nil
	}

	q := db.GetPG().UserDept
	l, err := q.WithContext(ctx).
		Where(q.ID.In(iDList...)).Find()
	if err != nil {
		return nil, err
	}
	userMap = make(map[int32]*UserDeptDO)
	for _, i := range l {
		userMap[i.ID] = i
	}
	return userMap, nil
}

