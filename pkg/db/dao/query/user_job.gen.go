// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gogogo/pkg/db/dao/model"
)

func newUserJob(db *gorm.DB, opts ...gen.DOOption) userJob {
	_userJob := userJob{}

	_userJob.userJobDo.UseDB(db, opts...)
	_userJob.userJobDo.UseModel(&model.UserJob{})

	tableName := _userJob.userJobDo.TableName()
	_userJob.ALL = field.NewAsterisk(tableName)
	_userJob.ID = field.NewInt32(tableName, "id")
	_userJob.JobName = field.NewString(tableName, "job_name")

	_userJob.fillFieldMap()

	return _userJob
}

type userJob struct {
	userJobDo userJobDo

	ALL     field.Asterisk
	ID      field.Int32
	JobName field.String

	fieldMap map[string]field.Expr
}

func (u userJob) Table(newTableName string) *userJob {
	u.userJobDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userJob) As(alias string) *userJob {
	u.userJobDo.DO = *(u.userJobDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userJob) updateTableName(table string) *userJob {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.JobName = field.NewString(table, "job_name")

	u.fillFieldMap()

	return u
}

func (u *userJob) WithContext(ctx context.Context) *userJobDo { return u.userJobDo.WithContext(ctx) }

func (u userJob) TableName() string { return u.userJobDo.TableName() }

func (u userJob) Alias() string { return u.userJobDo.Alias() }

func (u *userJob) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userJob) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 2)
	u.fieldMap["id"] = u.ID
	u.fieldMap["job_name"] = u.JobName
}

func (u userJob) clone(db *gorm.DB) userJob {
	u.userJobDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userJob) replaceDB(db *gorm.DB) userJob {
	u.userJobDo.ReplaceDB(db)
	return u
}

type userJobDo struct{ gen.DO }

func (u userJobDo) Debug() *userJobDo {
	return u.withDO(u.DO.Debug())
}

func (u userJobDo) WithContext(ctx context.Context) *userJobDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userJobDo) ReadDB() *userJobDo {
	return u.Clauses(dbresolver.Read)
}

func (u userJobDo) WriteDB() *userJobDo {
	return u.Clauses(dbresolver.Write)
}

func (u userJobDo) Session(config *gorm.Session) *userJobDo {
	return u.withDO(u.DO.Session(config))
}

func (u userJobDo) Clauses(conds ...clause.Expression) *userJobDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userJobDo) Returning(value interface{}, columns ...string) *userJobDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userJobDo) Not(conds ...gen.Condition) *userJobDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userJobDo) Or(conds ...gen.Condition) *userJobDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userJobDo) Select(conds ...field.Expr) *userJobDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userJobDo) Where(conds ...gen.Condition) *userJobDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userJobDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *userJobDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userJobDo) Order(conds ...field.Expr) *userJobDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userJobDo) Distinct(cols ...field.Expr) *userJobDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userJobDo) Omit(cols ...field.Expr) *userJobDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userJobDo) Join(table schema.Tabler, on ...field.Expr) *userJobDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userJobDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userJobDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userJobDo) RightJoin(table schema.Tabler, on ...field.Expr) *userJobDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userJobDo) Group(cols ...field.Expr) *userJobDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userJobDo) Having(conds ...gen.Condition) *userJobDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userJobDo) Limit(limit int) *userJobDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userJobDo) Offset(offset int) *userJobDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userJobDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userJobDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userJobDo) Unscoped() *userJobDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userJobDo) Create(values ...*model.UserJob) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userJobDo) CreateInBatches(values []*model.UserJob, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userJobDo) Save(values ...*model.UserJob) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userJobDo) First() (*model.UserJob, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserJob), nil
	}
}

func (u userJobDo) Take() (*model.UserJob, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserJob), nil
	}
}

func (u userJobDo) Last() (*model.UserJob, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserJob), nil
	}
}

func (u userJobDo) Find() ([]*model.UserJob, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserJob), err
}

func (u userJobDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserJob, err error) {
	buf := make([]*model.UserJob, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userJobDo) FindInBatches(result *[]*model.UserJob, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userJobDo) Attrs(attrs ...field.AssignExpr) *userJobDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userJobDo) Assign(attrs ...field.AssignExpr) *userJobDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userJobDo) Joins(fields ...field.RelationField) *userJobDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userJobDo) Preload(fields ...field.RelationField) *userJobDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userJobDo) FirstOrInit() (*model.UserJob, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserJob), nil
	}
}

func (u userJobDo) FirstOrCreate() (*model.UserJob, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserJob), nil
	}
}

func (u userJobDo) FindByPage(offset int, limit int) (result []*model.UserJob, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userJobDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userJobDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userJobDo) Delete(models ...*model.UserJob) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userJobDo) withDO(do gen.Dao) *userJobDo {
	u.DO = *do.(*gen.DO)
	return u
}
