// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"pgo/pkg/db/dao/model"
)

func newCourseSwapRequest(db *gorm.DB, opts ...gen.DOOption) courseSwapRequest {
	_courseSwapRequest := courseSwapRequest{}

	_courseSwapRequest.courseSwapRequestDo.UseDB(db, opts...)
	_courseSwapRequest.courseSwapRequestDo.UseModel(&model.CourseSwapRequest{})

	tableName := _courseSwapRequest.courseSwapRequestDo.TableName()
	_courseSwapRequest.ALL = field.NewAsterisk(tableName)
	_courseSwapRequest.ID = field.NewInt32(tableName, "id")
	_courseSwapRequest.SrcTeacher = field.NewString(tableName, "src_teacher")
	_courseSwapRequest.SrcDate = field.NewString(tableName, "src_date")
	_courseSwapRequest.SrcCourseNum = field.NewInt32(tableName, "src_course_num")
	_courseSwapRequest.SrcCourse = field.NewString(tableName, "src_course")
	_courseSwapRequest.SrcClass = field.NewString(tableName, "src_class")
	_courseSwapRequest.DstTeacher = field.NewString(tableName, "dst_teacher")
	_courseSwapRequest.DstDate = field.NewString(tableName, "dst_date")
	_courseSwapRequest.DstCourseNum = field.NewInt32(tableName, "dst_course_num")
	_courseSwapRequest.DstCourse = field.NewString(tableName, "dst_course")
	_courseSwapRequest.DstClass = field.NewString(tableName, "dst_class")
	_courseSwapRequest.CreateTime = field.NewString(tableName, "create_time")
	_courseSwapRequest.Status = field.NewInt32(tableName, "status")

	_courseSwapRequest.fillFieldMap()

	return _courseSwapRequest
}

type courseSwapRequest struct {
	courseSwapRequestDo courseSwapRequestDo

	ALL          field.Asterisk
	ID           field.Int32
	SrcTeacher   field.String
	SrcDate      field.String
	SrcCourseNum field.Int32
	SrcCourse    field.String
	SrcClass     field.String
	DstTeacher   field.String
	DstDate      field.String
	DstCourseNum field.Int32
	DstCourse    field.String
	DstClass     field.String
	CreateTime   field.String
	Status       field.Int32

	fieldMap map[string]field.Expr
}

func (c courseSwapRequest) Table(newTableName string) *courseSwapRequest {
	c.courseSwapRequestDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c courseSwapRequest) As(alias string) *courseSwapRequest {
	c.courseSwapRequestDo.DO = *(c.courseSwapRequestDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *courseSwapRequest) updateTableName(table string) *courseSwapRequest {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.SrcTeacher = field.NewString(table, "src_teacher")
	c.SrcDate = field.NewString(table, "src_date")
	c.SrcCourseNum = field.NewInt32(table, "src_course_num")
	c.SrcCourse = field.NewString(table, "src_course")
	c.SrcClass = field.NewString(table, "src_class")
	c.DstTeacher = field.NewString(table, "dst_teacher")
	c.DstDate = field.NewString(table, "dst_date")
	c.DstCourseNum = field.NewInt32(table, "dst_course_num")
	c.DstCourse = field.NewString(table, "dst_course")
	c.DstClass = field.NewString(table, "dst_class")
	c.CreateTime = field.NewString(table, "create_time")
	c.Status = field.NewInt32(table, "status")

	c.fillFieldMap()

	return c
}

func (c *courseSwapRequest) WithContext(ctx context.Context) *courseSwapRequestDo {
	return c.courseSwapRequestDo.WithContext(ctx)
}

func (c courseSwapRequest) TableName() string { return c.courseSwapRequestDo.TableName() }

func (c courseSwapRequest) Alias() string { return c.courseSwapRequestDo.Alias() }

func (c courseSwapRequest) Columns(cols ...field.Expr) gen.Columns {
	return c.courseSwapRequestDo.Columns(cols...)
}

func (c *courseSwapRequest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *courseSwapRequest) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 13)
	c.fieldMap["id"] = c.ID
	c.fieldMap["src_teacher"] = c.SrcTeacher
	c.fieldMap["src_date"] = c.SrcDate
	c.fieldMap["src_course_num"] = c.SrcCourseNum
	c.fieldMap["src_course"] = c.SrcCourse
	c.fieldMap["src_class"] = c.SrcClass
	c.fieldMap["dst_teacher"] = c.DstTeacher
	c.fieldMap["dst_date"] = c.DstDate
	c.fieldMap["dst_course_num"] = c.DstCourseNum
	c.fieldMap["dst_course"] = c.DstCourse
	c.fieldMap["dst_class"] = c.DstClass
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["status"] = c.Status
}

func (c courseSwapRequest) clone(db *gorm.DB) courseSwapRequest {
	c.courseSwapRequestDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c courseSwapRequest) replaceDB(db *gorm.DB) courseSwapRequest {
	c.courseSwapRequestDo.ReplaceDB(db)
	return c
}

type courseSwapRequestDo struct{ gen.DO }

func (c courseSwapRequestDo) Debug() *courseSwapRequestDo {
	return c.withDO(c.DO.Debug())
}

func (c courseSwapRequestDo) WithContext(ctx context.Context) *courseSwapRequestDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c courseSwapRequestDo) ReadDB() *courseSwapRequestDo {
	return c.Clauses(dbresolver.Read)
}

func (c courseSwapRequestDo) WriteDB() *courseSwapRequestDo {
	return c.Clauses(dbresolver.Write)
}

func (c courseSwapRequestDo) Session(config *gorm.Session) *courseSwapRequestDo {
	return c.withDO(c.DO.Session(config))
}

func (c courseSwapRequestDo) Clauses(conds ...clause.Expression) *courseSwapRequestDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c courseSwapRequestDo) Returning(value interface{}, columns ...string) *courseSwapRequestDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c courseSwapRequestDo) Not(conds ...gen.Condition) *courseSwapRequestDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c courseSwapRequestDo) Or(conds ...gen.Condition) *courseSwapRequestDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c courseSwapRequestDo) Select(conds ...field.Expr) *courseSwapRequestDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c courseSwapRequestDo) Where(conds ...gen.Condition) *courseSwapRequestDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c courseSwapRequestDo) Order(conds ...field.Expr) *courseSwapRequestDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c courseSwapRequestDo) Distinct(cols ...field.Expr) *courseSwapRequestDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c courseSwapRequestDo) Omit(cols ...field.Expr) *courseSwapRequestDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c courseSwapRequestDo) Join(table schema.Tabler, on ...field.Expr) *courseSwapRequestDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c courseSwapRequestDo) LeftJoin(table schema.Tabler, on ...field.Expr) *courseSwapRequestDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c courseSwapRequestDo) RightJoin(table schema.Tabler, on ...field.Expr) *courseSwapRequestDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c courseSwapRequestDo) Group(cols ...field.Expr) *courseSwapRequestDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c courseSwapRequestDo) Having(conds ...gen.Condition) *courseSwapRequestDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c courseSwapRequestDo) Limit(limit int) *courseSwapRequestDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c courseSwapRequestDo) Offset(offset int) *courseSwapRequestDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c courseSwapRequestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *courseSwapRequestDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c courseSwapRequestDo) Unscoped() *courseSwapRequestDo {
	return c.withDO(c.DO.Unscoped())
}

func (c courseSwapRequestDo) Create(values ...*model.CourseSwapRequest) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c courseSwapRequestDo) CreateInBatches(values []*model.CourseSwapRequest, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c courseSwapRequestDo) Save(values ...*model.CourseSwapRequest) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c courseSwapRequestDo) First() (*model.CourseSwapRequest, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseSwapRequest), nil
	}
}

func (c courseSwapRequestDo) Take() (*model.CourseSwapRequest, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseSwapRequest), nil
	}
}

func (c courseSwapRequestDo) Last() (*model.CourseSwapRequest, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseSwapRequest), nil
	}
}

func (c courseSwapRequestDo) Find() ([]*model.CourseSwapRequest, error) {
	result, err := c.DO.Find()
	return result.([]*model.CourseSwapRequest), err
}

func (c courseSwapRequestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CourseSwapRequest, err error) {
	buf := make([]*model.CourseSwapRequest, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c courseSwapRequestDo) FindInBatches(result *[]*model.CourseSwapRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c courseSwapRequestDo) Attrs(attrs ...field.AssignExpr) *courseSwapRequestDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c courseSwapRequestDo) Assign(attrs ...field.AssignExpr) *courseSwapRequestDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c courseSwapRequestDo) Joins(fields ...field.RelationField) *courseSwapRequestDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c courseSwapRequestDo) Preload(fields ...field.RelationField) *courseSwapRequestDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c courseSwapRequestDo) FirstOrInit() (*model.CourseSwapRequest, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseSwapRequest), nil
	}
}

func (c courseSwapRequestDo) FirstOrCreate() (*model.CourseSwapRequest, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseSwapRequest), nil
	}
}

func (c courseSwapRequestDo) FindByPage(offset int, limit int) (result []*model.CourseSwapRequest, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c courseSwapRequestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c courseSwapRequestDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c courseSwapRequestDo) Delete(models ...*model.CourseSwapRequest) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *courseSwapRequestDo) withDO(do gen.Dao) *courseSwapRequestDo {
	c.DO = *do.(*gen.DO)
	return c
}
