// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"pgo/pkg/db/dao/model"
)

func newUserDeptAssoc(db *gorm.DB, opts ...gen.DOOption) userDeptAssoc {
	_userDeptAssoc := userDeptAssoc{}

	_userDeptAssoc.userDeptAssocDo.UseDB(db, opts...)
	_userDeptAssoc.userDeptAssocDo.UseModel(&model.UserDeptAssoc{})

	tableName := _userDeptAssoc.userDeptAssocDo.TableName()
	_userDeptAssoc.ALL = field.NewAsterisk(tableName)
	_userDeptAssoc.UserID = field.NewInt32(tableName, "user_id")
	_userDeptAssoc.DeptID = field.NewInt32(tableName, "dept_id")
	_userDeptAssoc.JobID = field.NewInt32(tableName, "job_id")

	_userDeptAssoc.fillFieldMap()

	return _userDeptAssoc
}

type userDeptAssoc struct {
	userDeptAssocDo userDeptAssocDo

	ALL    field.Asterisk
	UserID field.Int32
	DeptID field.Int32
	JobID  field.Int32

	fieldMap map[string]field.Expr
}

func (u userDeptAssoc) Table(newTableName string) *userDeptAssoc {
	u.userDeptAssocDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userDeptAssoc) As(alias string) *userDeptAssoc {
	u.userDeptAssocDo.DO = *(u.userDeptAssocDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userDeptAssoc) updateTableName(table string) *userDeptAssoc {
	u.ALL = field.NewAsterisk(table)
	u.UserID = field.NewInt32(table, "user_id")
	u.DeptID = field.NewInt32(table, "dept_id")
	u.JobID = field.NewInt32(table, "job_id")

	u.fillFieldMap()

	return u
}

func (u *userDeptAssoc) WithContext(ctx context.Context) *userDeptAssocDo {
	return u.userDeptAssocDo.WithContext(ctx)
}

func (u userDeptAssoc) TableName() string { return u.userDeptAssocDo.TableName() }

func (u userDeptAssoc) Alias() string { return u.userDeptAssocDo.Alias() }

func (u userDeptAssoc) Columns(cols ...field.Expr) gen.Columns {
	return u.userDeptAssocDo.Columns(cols...)
}

func (u *userDeptAssoc) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userDeptAssoc) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["dept_id"] = u.DeptID
	u.fieldMap["job_id"] = u.JobID
}

func (u userDeptAssoc) clone(db *gorm.DB) userDeptAssoc {
	u.userDeptAssocDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userDeptAssoc) replaceDB(db *gorm.DB) userDeptAssoc {
	u.userDeptAssocDo.ReplaceDB(db)
	return u
}

type userDeptAssocDo struct{ gen.DO }

func (u userDeptAssocDo) Debug() *userDeptAssocDo {
	return u.withDO(u.DO.Debug())
}

func (u userDeptAssocDo) WithContext(ctx context.Context) *userDeptAssocDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDeptAssocDo) ReadDB() *userDeptAssocDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDeptAssocDo) WriteDB() *userDeptAssocDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDeptAssocDo) Session(config *gorm.Session) *userDeptAssocDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDeptAssocDo) Clauses(conds ...clause.Expression) *userDeptAssocDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDeptAssocDo) Returning(value interface{}, columns ...string) *userDeptAssocDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDeptAssocDo) Not(conds ...gen.Condition) *userDeptAssocDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDeptAssocDo) Or(conds ...gen.Condition) *userDeptAssocDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDeptAssocDo) Select(conds ...field.Expr) *userDeptAssocDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDeptAssocDo) Where(conds ...gen.Condition) *userDeptAssocDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDeptAssocDo) Order(conds ...field.Expr) *userDeptAssocDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDeptAssocDo) Distinct(cols ...field.Expr) *userDeptAssocDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDeptAssocDo) Omit(cols ...field.Expr) *userDeptAssocDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDeptAssocDo) Join(table schema.Tabler, on ...field.Expr) *userDeptAssocDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDeptAssocDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userDeptAssocDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDeptAssocDo) RightJoin(table schema.Tabler, on ...field.Expr) *userDeptAssocDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDeptAssocDo) Group(cols ...field.Expr) *userDeptAssocDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDeptAssocDo) Having(conds ...gen.Condition) *userDeptAssocDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDeptAssocDo) Limit(limit int) *userDeptAssocDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDeptAssocDo) Offset(offset int) *userDeptAssocDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDeptAssocDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userDeptAssocDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDeptAssocDo) Unscoped() *userDeptAssocDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDeptAssocDo) Create(values ...*model.UserDeptAssoc) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDeptAssocDo) CreateInBatches(values []*model.UserDeptAssoc, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDeptAssocDo) Save(values ...*model.UserDeptAssoc) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDeptAssocDo) First() (*model.UserDeptAssoc, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDeptAssoc), nil
	}
}

func (u userDeptAssocDo) Take() (*model.UserDeptAssoc, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDeptAssoc), nil
	}
}

func (u userDeptAssocDo) Last() (*model.UserDeptAssoc, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDeptAssoc), nil
	}
}

func (u userDeptAssocDo) Find() ([]*model.UserDeptAssoc, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserDeptAssoc), err
}

func (u userDeptAssocDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserDeptAssoc, err error) {
	buf := make([]*model.UserDeptAssoc, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDeptAssocDo) FindInBatches(result *[]*model.UserDeptAssoc, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDeptAssocDo) Attrs(attrs ...field.AssignExpr) *userDeptAssocDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDeptAssocDo) Assign(attrs ...field.AssignExpr) *userDeptAssocDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDeptAssocDo) Joins(fields ...field.RelationField) *userDeptAssocDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDeptAssocDo) Preload(fields ...field.RelationField) *userDeptAssocDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDeptAssocDo) FirstOrInit() (*model.UserDeptAssoc, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDeptAssoc), nil
	}
}

func (u userDeptAssocDo) FirstOrCreate() (*model.UserDeptAssoc, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDeptAssoc), nil
	}
}

func (u userDeptAssocDo) FindByPage(offset int, limit int) (result []*model.UserDeptAssoc, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDeptAssocDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDeptAssocDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDeptAssocDo) Delete(models ...*model.UserDeptAssoc) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDeptAssocDo) withDO(do gen.Dao) *userDeptAssocDo {
	u.DO = *do.(*gen.DO)
	return u
}
