// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: user.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_Login_FullMethodName        = "/api.User/Login"
	User_GetUserList_FullMethodName  = "/api.User/GetUserList"
	User_DelUser_FullMethodName      = "/api.User/DelUser"
	User_EditUserName_FullMethodName = "/api.User/EditUserName"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// 登录或注册
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// 获取用户列表
	GetUserList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetUserListResponse, error)
	// 删除用户
	DelUser(ctx context.Context, in *DelUserRequest, opts ...grpc.CallOption) (*Empty, error)
	// 修改用户名
	EditUserName(ctx context.Context, in *EditUserNameRequest, opts ...grpc.CallOption) (*Empty, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, User_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetUserListResponse, error) {
	out := new(GetUserListResponse)
	err := c.cc.Invoke(ctx, User_GetUserList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelUser(ctx context.Context, in *DelUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, User_DelUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) EditUserName(ctx context.Context, in *EditUserNameRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, User_EditUserName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// 登录或注册
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// 获取用户列表
	GetUserList(context.Context, *Empty) (*GetUserListResponse, error)
	// 删除用户
	DelUser(context.Context, *DelUserRequest) (*Empty, error)
	// 修改用户名
	EditUserName(context.Context, *EditUserNameRequest) (*Empty, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServer) GetUserList(context.Context, *Empty) (*GetUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedUserServer) DelUser(context.Context, *DelUserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUser not implemented")
}
func (UnimplementedUserServer) EditUserName(context.Context, *EditUserNameRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUserName not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DelUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelUser(ctx, req.(*DelUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_EditUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).EditUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_EditUserName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).EditUserName(ctx, req.(*EditUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "GetUserList",
			Handler:    _User_GetUserList_Handler,
		},
		{
			MethodName: "DelUser",
			Handler:    _User_DelUser_Handler,
		},
		{
			MethodName: "EditUserName",
			Handler:    _User_EditUserName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

const (
	UserJob_AddUserJob_FullMethodName      = "/api.UserJob/AddUserJob"
	UserJob_GetUserJobList_FullMethodName  = "/api.UserJob/GetUserJobList"
	UserJob_DelUserJob_FullMethodName      = "/api.UserJob/DelUserJob"
	UserJob_EditUserJobName_FullMethodName = "/api.UserJob/EditUserJobName"
)

// UserJobClient is the client API for UserJob service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserJobClient interface {
	// 添加用户职位
	AddUserJob(ctx context.Context, in *AddUserJobRequest, opts ...grpc.CallOption) (*AddUserJobResponse, error)
	// 获取用户职位列表
	GetUserJobList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetUserJobListResponse, error)
	// 删除用户职位
	DelUserJob(ctx context.Context, in *DelUserJobRequest, opts ...grpc.CallOption) (*Empty, error)
	// 修改用户职位名
	EditUserJobName(ctx context.Context, in *EditUserJobNameRequest, opts ...grpc.CallOption) (*Empty, error)
}

type userJobClient struct {
	cc grpc.ClientConnInterface
}

func NewUserJobClient(cc grpc.ClientConnInterface) UserJobClient {
	return &userJobClient{cc}
}

func (c *userJobClient) AddUserJob(ctx context.Context, in *AddUserJobRequest, opts ...grpc.CallOption) (*AddUserJobResponse, error) {
	out := new(AddUserJobResponse)
	err := c.cc.Invoke(ctx, UserJob_AddUserJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userJobClient) GetUserJobList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetUserJobListResponse, error) {
	out := new(GetUserJobListResponse)
	err := c.cc.Invoke(ctx, UserJob_GetUserJobList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userJobClient) DelUserJob(ctx context.Context, in *DelUserJobRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserJob_DelUserJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userJobClient) EditUserJobName(ctx context.Context, in *EditUserJobNameRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserJob_EditUserJobName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserJobServer is the server API for UserJob service.
// All implementations must embed UnimplementedUserJobServer
// for forward compatibility
type UserJobServer interface {
	// 添加用户职位
	AddUserJob(context.Context, *AddUserJobRequest) (*AddUserJobResponse, error)
	// 获取用户职位列表
	GetUserJobList(context.Context, *Empty) (*GetUserJobListResponse, error)
	// 删除用户职位
	DelUserJob(context.Context, *DelUserJobRequest) (*Empty, error)
	// 修改用户职位名
	EditUserJobName(context.Context, *EditUserJobNameRequest) (*Empty, error)
	mustEmbedUnimplementedUserJobServer()
}

// UnimplementedUserJobServer must be embedded to have forward compatible implementations.
type UnimplementedUserJobServer struct {
}

func (UnimplementedUserJobServer) AddUserJob(context.Context, *AddUserJobRequest) (*AddUserJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserJob not implemented")
}
func (UnimplementedUserJobServer) GetUserJobList(context.Context, *Empty) (*GetUserJobListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserJobList not implemented")
}
func (UnimplementedUserJobServer) DelUserJob(context.Context, *DelUserJobRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserJob not implemented")
}
func (UnimplementedUserJobServer) EditUserJobName(context.Context, *EditUserJobNameRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUserJobName not implemented")
}
func (UnimplementedUserJobServer) mustEmbedUnimplementedUserJobServer() {}

// UnsafeUserJobServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserJobServer will
// result in compilation errors.
type UnsafeUserJobServer interface {
	mustEmbedUnimplementedUserJobServer()
}

func RegisterUserJobServer(s grpc.ServiceRegistrar, srv UserJobServer) {
	s.RegisterService(&UserJob_ServiceDesc, srv)
}

func _UserJob_AddUserJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserJobServer).AddUserJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserJob_AddUserJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserJobServer).AddUserJob(ctx, req.(*AddUserJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserJob_GetUserJobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserJobServer).GetUserJobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserJob_GetUserJobList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserJobServer).GetUserJobList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserJob_DelUserJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserJobServer).DelUserJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserJob_DelUserJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserJobServer).DelUserJob(ctx, req.(*DelUserJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserJob_EditUserJobName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditUserJobNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserJobServer).EditUserJobName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserJob_EditUserJobName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserJobServer).EditUserJobName(ctx, req.(*EditUserJobNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserJob_ServiceDesc is the grpc.ServiceDesc for UserJob service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserJob_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.UserJob",
	HandlerType: (*UserJobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUserJob",
			Handler:    _UserJob_AddUserJob_Handler,
		},
		{
			MethodName: "GetUserJobList",
			Handler:    _UserJob_GetUserJobList_Handler,
		},
		{
			MethodName: "DelUserJob",
			Handler:    _UserJob_DelUserJob_Handler,
		},
		{
			MethodName: "EditUserJobName",
			Handler:    _UserJob_EditUserJobName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
