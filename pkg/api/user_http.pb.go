// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v3.21.9
// source: user.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserDelUser = "/api.User/DelUser"
const OperationUserEditUserName = "/api.User/EditUserName"
const OperationUserGetUserList = "/api.User/GetUserList"
const OperationUserLogin = "/api.User/Login"

type UserHTTPServer interface {
	// DelUser 删除用户
	DelUser(context.Context, *DelUserRequest) (*Empty, error)
	// EditUserName 修改用户名
	EditUserName(context.Context, *EditUserNameRequest) (*Empty, error)
	// GetUserList 获取用户列表
	GetUserList(context.Context, *Empty) (*GetUserListResponse, error)
	// Login 登录或注册
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
}

func RegisterUserHTTPServer(s *http.Server, srv UserHTTPServer) {
	r := s.Route("/")
	r.POST("/user", _User_Login0_HTTP_Handler(srv))
	r.GET("/user", _User_GetUserList0_HTTP_Handler(srv))
	r.DELETE("/user", _User_DelUser0_HTTP_Handler(srv))
	r.PATCH("/user", _User_EditUserName0_HTTP_Handler(srv))
}

func _User_Login0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResponse)
		return ctx.Result(200, reply)
	}
}

func _User_GetUserList0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetUserList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserList(ctx, req.(*Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserListResponse)
		return ctx.Result(200, reply)
	}
}

func _User_DelUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserDelUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelUser(ctx, req.(*DelUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _User_EditUserName0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EditUserNameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserEditUserName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EditUserName(ctx, req.(*EditUserNameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

type UserHTTPClient interface {
	DelUser(ctx context.Context, req *DelUserRequest, opts ...http.CallOption) (rsp *Empty, err error)
	EditUserName(ctx context.Context, req *EditUserNameRequest, opts ...http.CallOption) (rsp *Empty, err error)
	GetUserList(ctx context.Context, req *Empty, opts ...http.CallOption) (rsp *GetUserListResponse, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginResponse, err error)
}

type UserHTTPClientImpl struct {
	cc *http.Client
}

func NewUserHTTPClient(client *http.Client) UserHTTPClient {
	return &UserHTTPClientImpl{client}
}

func (c *UserHTTPClientImpl) DelUser(ctx context.Context, in *DelUserRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserDelUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) EditUserName(ctx context.Context, in *EditUserNameRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserEditUserName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) GetUserList(ctx context.Context, in *Empty, opts ...http.CallOption) (*GetUserListResponse, error) {
	var out GetUserListResponse
	pattern := "/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserGetUserList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginResponse, error) {
	var out LoginResponse
	pattern := "/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

const OperationUserJobAddUserJob = "/api.UserJob/AddUserJob"
const OperationUserJobDelUserJob = "/api.UserJob/DelUserJob"
const OperationUserJobEditUserJobName = "/api.UserJob/EditUserJobName"
const OperationUserJobGetUserJobList = "/api.UserJob/GetUserJobList"

type UserJobHTTPServer interface {
	// AddUserJob 添加用户职位
	AddUserJob(context.Context, *AddUserJobRequest) (*AddUserJobResponse, error)
	// DelUserJob 删除用户职位
	DelUserJob(context.Context, *DelUserJobRequest) (*Empty, error)
	// EditUserJobName 修改用户职位名
	EditUserJobName(context.Context, *EditUserJobNameRequest) (*Empty, error)
	// GetUserJobList 获取用户职位列表
	GetUserJobList(context.Context, *Empty) (*GetUserJobListResponse, error)
}

func RegisterUserJobHTTPServer(s *http.Server, srv UserJobHTTPServer) {
	r := s.Route("/")
	r.POST("/user/job", _UserJob_AddUserJob0_HTTP_Handler(srv))
	r.GET("/user/job", _UserJob_GetUserJobList0_HTTP_Handler(srv))
	r.DELETE("/user/job", _UserJob_DelUserJob0_HTTP_Handler(srv))
	r.PATCH("/user/job", _UserJob_EditUserJobName0_HTTP_Handler(srv))
}

func _UserJob_AddUserJob0_HTTP_Handler(srv UserJobHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddUserJobRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserJobAddUserJob)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddUserJob(ctx, req.(*AddUserJobRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddUserJobResponse)
		return ctx.Result(200, reply)
	}
}

func _UserJob_GetUserJobList0_HTTP_Handler(srv UserJobHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserJobGetUserJobList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserJobList(ctx, req.(*Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserJobListResponse)
		return ctx.Result(200, reply)
	}
}

func _UserJob_DelUserJob0_HTTP_Handler(srv UserJobHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelUserJobRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserJobDelUserJob)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelUserJob(ctx, req.(*DelUserJobRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _UserJob_EditUserJobName0_HTTP_Handler(srv UserJobHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EditUserJobNameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserJobEditUserJobName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EditUserJobName(ctx, req.(*EditUserJobNameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

type UserJobHTTPClient interface {
	AddUserJob(ctx context.Context, req *AddUserJobRequest, opts ...http.CallOption) (rsp *AddUserJobResponse, err error)
	DelUserJob(ctx context.Context, req *DelUserJobRequest, opts ...http.CallOption) (rsp *Empty, err error)
	EditUserJobName(ctx context.Context, req *EditUserJobNameRequest, opts ...http.CallOption) (rsp *Empty, err error)
	GetUserJobList(ctx context.Context, req *Empty, opts ...http.CallOption) (rsp *GetUserJobListResponse, err error)
}

type UserJobHTTPClientImpl struct {
	cc *http.Client
}

func NewUserJobHTTPClient(client *http.Client) UserJobHTTPClient {
	return &UserJobHTTPClientImpl{client}
}

func (c *UserJobHTTPClientImpl) AddUserJob(ctx context.Context, in *AddUserJobRequest, opts ...http.CallOption) (*AddUserJobResponse, error) {
	var out AddUserJobResponse
	pattern := "/user/job"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserJobAddUserJob))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserJobHTTPClientImpl) DelUserJob(ctx context.Context, in *DelUserJobRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/user/job"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserJobDelUserJob))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserJobHTTPClientImpl) EditUserJobName(ctx context.Context, in *EditUserJobNameRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/user/job"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserJobEditUserJobName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserJobHTTPClientImpl) GetUserJobList(ctx context.Context, in *Empty, opts ...http.CallOption) (*GetUserJobListResponse, error) {
	var out GetUserJobListResponse
	pattern := "/user/job"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserJobGetUserJobList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
