// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: abandonCode.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AbandonCodeCURD_AddAbandonCode_FullMethodName           = "/api.abandonCodeCURD/AddAbandonCode"
	AbandonCodeCURD_GetAbandonCodeList_FullMethodName       = "/api.abandonCodeCURD/GetAbandonCodeList"
	AbandonCodeCURD_DelAbandonCodeByIdx1List_FullMethodName = "/api.abandonCodeCURD/DelAbandonCodeByIdx1List"
)

// AbandonCodeCURDClient is the client API for AbandonCodeCURD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// --------------------------------------------------
type AbandonCodeCURDClient interface {
	// MARK REPEAT API START
	// tbl : abandon_code
	AddAbandonCode(ctx context.Context, in *AddAbandonCodeRequest, opts ...grpc.CallOption) (*AddAbandonCodeResponse, error)
	GetAbandonCodeList(ctx context.Context, in *GetAbandonCodeListRequest, opts ...grpc.CallOption) (*GetAbandonCodeListResponse, error)
	// MARK REPLACE IDX START 替换内容，没有索引的表，以替换的形式删除
	DelAbandonCodeByIdx1List(ctx context.Context, in *DelAbandonCodeByIdx1ListRequest, opts ...grpc.CallOption) (*Empty, error)
}

type abandonCodeCURDClient struct {
	cc grpc.ClientConnInterface
}

func NewAbandonCodeCURDClient(cc grpc.ClientConnInterface) AbandonCodeCURDClient {
	return &abandonCodeCURDClient{cc}
}

func (c *abandonCodeCURDClient) AddAbandonCode(ctx context.Context, in *AddAbandonCodeRequest, opts ...grpc.CallOption) (*AddAbandonCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAbandonCodeResponse)
	err := c.cc.Invoke(ctx, AbandonCodeCURD_AddAbandonCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *abandonCodeCURDClient) GetAbandonCodeList(ctx context.Context, in *GetAbandonCodeListRequest, opts ...grpc.CallOption) (*GetAbandonCodeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAbandonCodeListResponse)
	err := c.cc.Invoke(ctx, AbandonCodeCURD_GetAbandonCodeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *abandonCodeCURDClient) DelAbandonCodeByIdx1List(ctx context.Context, in *DelAbandonCodeByIdx1ListRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AbandonCodeCURD_DelAbandonCodeByIdx1List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AbandonCodeCURDServer is the server API for AbandonCodeCURD service.
// All implementations must embed UnimplementedAbandonCodeCURDServer
// for forward compatibility.
//
// --------------------------------------------------
type AbandonCodeCURDServer interface {
	// MARK REPEAT API START
	// tbl : abandon_code
	AddAbandonCode(context.Context, *AddAbandonCodeRequest) (*AddAbandonCodeResponse, error)
	GetAbandonCodeList(context.Context, *GetAbandonCodeListRequest) (*GetAbandonCodeListResponse, error)
	// MARK REPLACE IDX START 替换内容，没有索引的表，以替换的形式删除
	DelAbandonCodeByIdx1List(context.Context, *DelAbandonCodeByIdx1ListRequest) (*Empty, error)
	mustEmbedUnimplementedAbandonCodeCURDServer()
}

// UnimplementedAbandonCodeCURDServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAbandonCodeCURDServer struct{}

func (UnimplementedAbandonCodeCURDServer) AddAbandonCode(context.Context, *AddAbandonCodeRequest) (*AddAbandonCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAbandonCode not implemented")
}
func (UnimplementedAbandonCodeCURDServer) GetAbandonCodeList(context.Context, *GetAbandonCodeListRequest) (*GetAbandonCodeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbandonCodeList not implemented")
}
func (UnimplementedAbandonCodeCURDServer) DelAbandonCodeByIdx1List(context.Context, *DelAbandonCodeByIdx1ListRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAbandonCodeByIdx1List not implemented")
}
func (UnimplementedAbandonCodeCURDServer) mustEmbedUnimplementedAbandonCodeCURDServer() {}
func (UnimplementedAbandonCodeCURDServer) testEmbeddedByValue()                         {}

// UnsafeAbandonCodeCURDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AbandonCodeCURDServer will
// result in compilation errors.
type UnsafeAbandonCodeCURDServer interface {
	mustEmbedUnimplementedAbandonCodeCURDServer()
}

func RegisterAbandonCodeCURDServer(s grpc.ServiceRegistrar, srv AbandonCodeCURDServer) {
	// If the following call pancis, it indicates UnimplementedAbandonCodeCURDServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AbandonCodeCURD_ServiceDesc, srv)
}

func _AbandonCodeCURD_AddAbandonCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAbandonCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbandonCodeCURDServer).AddAbandonCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AbandonCodeCURD_AddAbandonCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbandonCodeCURDServer).AddAbandonCode(ctx, req.(*AddAbandonCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AbandonCodeCURD_GetAbandonCodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAbandonCodeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbandonCodeCURDServer).GetAbandonCodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AbandonCodeCURD_GetAbandonCodeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbandonCodeCURDServer).GetAbandonCodeList(ctx, req.(*GetAbandonCodeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AbandonCodeCURD_DelAbandonCodeByIdx1List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAbandonCodeByIdx1ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbandonCodeCURDServer).DelAbandonCodeByIdx1List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AbandonCodeCURD_DelAbandonCodeByIdx1List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbandonCodeCURDServer).DelAbandonCodeByIdx1List(ctx, req.(*DelAbandonCodeByIdx1ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AbandonCodeCURD_ServiceDesc is the grpc.ServiceDesc for AbandonCodeCURD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AbandonCodeCURD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.abandonCodeCURD",
	HandlerType: (*AbandonCodeCURDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAbandonCode",
			Handler:    _AbandonCodeCURD_AddAbandonCode_Handler,
		},
		{
			MethodName: "GetAbandonCodeList",
			Handler:    _AbandonCodeCURD_GetAbandonCodeList_Handler,
		},
		{
			MethodName: "DelAbandonCodeByIdx1List",
			Handler:    _AbandonCodeCURD_DelAbandonCodeByIdx1List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "abandonCode.proto",
}
