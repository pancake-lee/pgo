// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: abandonCode.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AbandonCode_AddAbandonCode_FullMethodName      = "/api.AbandonCode/AddAbandonCode"
	AbandonCode_GetAbandonCodeList_FullMethodName  = "/api.AbandonCode/GetAbandonCodeList"
	AbandonCode_DelAbandonCodeByIds_FullMethodName = "/api.AbandonCode/DelAbandonCodeByIds"
)

// AbandonCodeClient is the client API for AbandonCode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AbandonCodeClient interface {
	AddAbandonCode(ctx context.Context, in *AddAbandonCodeRequest, opts ...grpc.CallOption) (*AddAbandonCodeResponse, error)
	GetAbandonCodeList(ctx context.Context, in *GetAbandonCodeListRequest, opts ...grpc.CallOption) (*GetAbandonCodeListResponse, error)
	// MARK 5 START 替换内容，没有索引的表，以替换的形式删除
	DelAbandonCodeByIds(ctx context.Context, in *DelAbandonCodeByIdsRequest, opts ...grpc.CallOption) (*Empty, error)
}

type abandonCodeClient struct {
	cc grpc.ClientConnInterface
}

func NewAbandonCodeClient(cc grpc.ClientConnInterface) AbandonCodeClient {
	return &abandonCodeClient{cc}
}

func (c *abandonCodeClient) AddAbandonCode(ctx context.Context, in *AddAbandonCodeRequest, opts ...grpc.CallOption) (*AddAbandonCodeResponse, error) {
	out := new(AddAbandonCodeResponse)
	err := c.cc.Invoke(ctx, AbandonCode_AddAbandonCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *abandonCodeClient) GetAbandonCodeList(ctx context.Context, in *GetAbandonCodeListRequest, opts ...grpc.CallOption) (*GetAbandonCodeListResponse, error) {
	out := new(GetAbandonCodeListResponse)
	err := c.cc.Invoke(ctx, AbandonCode_GetAbandonCodeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *abandonCodeClient) DelAbandonCodeByIds(ctx context.Context, in *DelAbandonCodeByIdsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AbandonCode_DelAbandonCodeByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AbandonCodeServer is the server API for AbandonCode service.
// All implementations must embed UnimplementedAbandonCodeServer
// for forward compatibility
type AbandonCodeServer interface {
	AddAbandonCode(context.Context, *AddAbandonCodeRequest) (*AddAbandonCodeResponse, error)
	GetAbandonCodeList(context.Context, *GetAbandonCodeListRequest) (*GetAbandonCodeListResponse, error)
	// MARK 5 START 替换内容，没有索引的表，以替换的形式删除
	DelAbandonCodeByIds(context.Context, *DelAbandonCodeByIdsRequest) (*Empty, error)
	mustEmbedUnimplementedAbandonCodeServer()
}

// UnimplementedAbandonCodeServer must be embedded to have forward compatible implementations.
type UnimplementedAbandonCodeServer struct {
}

func (UnimplementedAbandonCodeServer) AddAbandonCode(context.Context, *AddAbandonCodeRequest) (*AddAbandonCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAbandonCode not implemented")
}
func (UnimplementedAbandonCodeServer) GetAbandonCodeList(context.Context, *GetAbandonCodeListRequest) (*GetAbandonCodeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbandonCodeList not implemented")
}
func (UnimplementedAbandonCodeServer) DelAbandonCodeByIds(context.Context, *DelAbandonCodeByIdsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAbandonCodeByIds not implemented")
}
func (UnimplementedAbandonCodeServer) mustEmbedUnimplementedAbandonCodeServer() {}

// UnsafeAbandonCodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AbandonCodeServer will
// result in compilation errors.
type UnsafeAbandonCodeServer interface {
	mustEmbedUnimplementedAbandonCodeServer()
}

func RegisterAbandonCodeServer(s grpc.ServiceRegistrar, srv AbandonCodeServer) {
	s.RegisterService(&AbandonCode_ServiceDesc, srv)
}

func _AbandonCode_AddAbandonCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAbandonCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbandonCodeServer).AddAbandonCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AbandonCode_AddAbandonCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbandonCodeServer).AddAbandonCode(ctx, req.(*AddAbandonCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AbandonCode_GetAbandonCodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAbandonCodeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbandonCodeServer).GetAbandonCodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AbandonCode_GetAbandonCodeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbandonCodeServer).GetAbandonCodeList(ctx, req.(*GetAbandonCodeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AbandonCode_DelAbandonCodeByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAbandonCodeByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbandonCodeServer).DelAbandonCodeByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AbandonCode_DelAbandonCodeByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbandonCodeServer).DelAbandonCodeByIds(ctx, req.(*DelAbandonCodeByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AbandonCode_ServiceDesc is the grpc.ServiceDesc for AbandonCode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AbandonCode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AbandonCode",
	HandlerType: (*AbandonCodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAbandonCode",
			Handler:    _AbandonCode_AddAbandonCode_Handler,
		},
		{
			MethodName: "GetAbandonCodeList",
			Handler:    _AbandonCode_GetAbandonCodeList_Handler,
		},
		{
			MethodName: "DelAbandonCodeByIds",
			Handler:    _AbandonCode_DelAbandonCodeByIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "abandonCode.proto",
}
