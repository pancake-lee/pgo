// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v3.21.9
// source: userService.gen.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserCURDAddUser = "/api.UserCURD/AddUser"
const OperationUserCURDDelUserByIDList = "/api.UserCURD/DelUserByIDList"
const OperationUserCURDGetUserList = "/api.UserCURD/GetUserList"

type UserCURDHTTPServer interface {
	AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error)
	// DelUserByIDList MARK 5 START 替换内容，没有索引的表，以替换的形式删除
	DelUserByIDList(context.Context, *DelUserByIDListRequest) (*Empty, error)
	GetUserList(context.Context, *GetUserListRequest) (*GetUserListResponse, error)
}

func RegisterUserCURDHTTPServer(s *http.Server, srv UserCURDHTTPServer) {
	r := s.Route("/")
	r.POST("/user", _UserCURD_AddUser0_HTTP_Handler(srv))
	r.GET("/user", _UserCURD_GetUserList0_HTTP_Handler(srv))
	r.DELETE("/user", _UserCURD_DelUserByIDList0_HTTP_Handler(srv))
}

func _UserCURD_AddUser0_HTTP_Handler(srv UserCURDHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserCURDAddUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddUser(ctx, req.(*AddUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddUserResponse)
		return ctx.Result(200, reply)
	}
}

func _UserCURD_GetUserList0_HTTP_Handler(srv UserCURDHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserCURDGetUserList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserList(ctx, req.(*GetUserListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserListResponse)
		return ctx.Result(200, reply)
	}
}

func _UserCURD_DelUserByIDList0_HTTP_Handler(srv UserCURDHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelUserByIDListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserCURDDelUserByIDList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelUserByIDList(ctx, req.(*DelUserByIDListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

type UserCURDHTTPClient interface {
	AddUser(ctx context.Context, req *AddUserRequest, opts ...http.CallOption) (rsp *AddUserResponse, err error)
	DelUserByIDList(ctx context.Context, req *DelUserByIDListRequest, opts ...http.CallOption) (rsp *Empty, err error)
	GetUserList(ctx context.Context, req *GetUserListRequest, opts ...http.CallOption) (rsp *GetUserListResponse, err error)
}

type UserCURDHTTPClientImpl struct {
	cc *http.Client
}

func NewUserCURDHTTPClient(client *http.Client) UserCURDHTTPClient {
	return &UserCURDHTTPClientImpl{client}
}

func (c *UserCURDHTTPClientImpl) AddUser(ctx context.Context, in *AddUserRequest, opts ...http.CallOption) (*AddUserResponse, error) {
	var out AddUserResponse
	pattern := "/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserCURDAddUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserCURDHTTPClientImpl) DelUserByIDList(ctx context.Context, in *DelUserByIDListRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserCURDDelUserByIDList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserCURDHTTPClientImpl) GetUserList(ctx context.Context, in *GetUserListRequest, opts ...http.CallOption) (*GetUserListResponse, error) {
	var out GetUserListResponse
	pattern := "/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserCURDGetUserList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

const OperationUserDeptCURDAddUserDept = "/api.UserDeptCURD/AddUserDept"
const OperationUserDeptCURDDelUserDeptByIDList = "/api.UserDeptCURD/DelUserDeptByIDList"
const OperationUserDeptCURDGetUserDeptList = "/api.UserDeptCURD/GetUserDeptList"

type UserDeptCURDHTTPServer interface {
	AddUserDept(context.Context, *AddUserDeptRequest) (*AddUserDeptResponse, error)
	// DelUserDeptByIDList MARK 5 START 替换内容，没有索引的表，以替换的形式删除
	DelUserDeptByIDList(context.Context, *DelUserDeptByIDListRequest) (*Empty, error)
	GetUserDeptList(context.Context, *GetUserDeptListRequest) (*GetUserDeptListResponse, error)
}

func RegisterUserDeptCURDHTTPServer(s *http.Server, srv UserDeptCURDHTTPServer) {
	r := s.Route("/")
	r.POST("/user-dept", _UserDeptCURD_AddUserDept0_HTTP_Handler(srv))
	r.GET("/user-dept", _UserDeptCURD_GetUserDeptList0_HTTP_Handler(srv))
	r.DELETE("/user-dept", _UserDeptCURD_DelUserDeptByIDList0_HTTP_Handler(srv))
}

func _UserDeptCURD_AddUserDept0_HTTP_Handler(srv UserDeptCURDHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddUserDeptRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserDeptCURDAddUserDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddUserDept(ctx, req.(*AddUserDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddUserDeptResponse)
		return ctx.Result(200, reply)
	}
}

func _UserDeptCURD_GetUserDeptList0_HTTP_Handler(srv UserDeptCURDHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserDeptListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserDeptCURDGetUserDeptList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserDeptList(ctx, req.(*GetUserDeptListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserDeptListResponse)
		return ctx.Result(200, reply)
	}
}

func _UserDeptCURD_DelUserDeptByIDList0_HTTP_Handler(srv UserDeptCURDHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelUserDeptByIDListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserDeptCURDDelUserDeptByIDList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelUserDeptByIDList(ctx, req.(*DelUserDeptByIDListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

type UserDeptCURDHTTPClient interface {
	AddUserDept(ctx context.Context, req *AddUserDeptRequest, opts ...http.CallOption) (rsp *AddUserDeptResponse, err error)
	DelUserDeptByIDList(ctx context.Context, req *DelUserDeptByIDListRequest, opts ...http.CallOption) (rsp *Empty, err error)
	GetUserDeptList(ctx context.Context, req *GetUserDeptListRequest, opts ...http.CallOption) (rsp *GetUserDeptListResponse, err error)
}

type UserDeptCURDHTTPClientImpl struct {
	cc *http.Client
}

func NewUserDeptCURDHTTPClient(client *http.Client) UserDeptCURDHTTPClient {
	return &UserDeptCURDHTTPClientImpl{client}
}

func (c *UserDeptCURDHTTPClientImpl) AddUserDept(ctx context.Context, in *AddUserDeptRequest, opts ...http.CallOption) (*AddUserDeptResponse, error) {
	var out AddUserDeptResponse
	pattern := "/user-dept"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserDeptCURDAddUserDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserDeptCURDHTTPClientImpl) DelUserDeptByIDList(ctx context.Context, in *DelUserDeptByIDListRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/user-dept"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserDeptCURDDelUserDeptByIDList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserDeptCURDHTTPClientImpl) GetUserDeptList(ctx context.Context, in *GetUserDeptListRequest, opts ...http.CallOption) (*GetUserDeptListResponse, error) {
	var out GetUserDeptListResponse
	pattern := "/user-dept"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserDeptCURDGetUserDeptList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

const OperationUserDeptAssocCURDAddUserDeptAssoc = "/api.UserDeptAssocCURD/AddUserDeptAssoc"
const OperationUserDeptAssocCURDGetUserDeptAssocList = "/api.UserDeptAssocCURD/GetUserDeptAssocList"

type UserDeptAssocCURDHTTPServer interface {
	AddUserDeptAssoc(context.Context, *AddUserDeptAssocRequest) (*AddUserDeptAssocResponse, error)
	GetUserDeptAssocList(context.Context, *GetUserDeptAssocListRequest) (*GetUserDeptAssocListResponse, error)
}

func RegisterUserDeptAssocCURDHTTPServer(s *http.Server, srv UserDeptAssocCURDHTTPServer) {
	r := s.Route("/")
	r.POST("/user-dept-assoc", _UserDeptAssocCURD_AddUserDeptAssoc0_HTTP_Handler(srv))
	r.GET("/user-dept-assoc", _UserDeptAssocCURD_GetUserDeptAssocList0_HTTP_Handler(srv))
}

func _UserDeptAssocCURD_AddUserDeptAssoc0_HTTP_Handler(srv UserDeptAssocCURDHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddUserDeptAssocRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserDeptAssocCURDAddUserDeptAssoc)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddUserDeptAssoc(ctx, req.(*AddUserDeptAssocRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddUserDeptAssocResponse)
		return ctx.Result(200, reply)
	}
}

func _UserDeptAssocCURD_GetUserDeptAssocList0_HTTP_Handler(srv UserDeptAssocCURDHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserDeptAssocListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserDeptAssocCURDGetUserDeptAssocList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserDeptAssocList(ctx, req.(*GetUserDeptAssocListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserDeptAssocListResponse)
		return ctx.Result(200, reply)
	}
}

type UserDeptAssocCURDHTTPClient interface {
	AddUserDeptAssoc(ctx context.Context, req *AddUserDeptAssocRequest, opts ...http.CallOption) (rsp *AddUserDeptAssocResponse, err error)
	GetUserDeptAssocList(ctx context.Context, req *GetUserDeptAssocListRequest, opts ...http.CallOption) (rsp *GetUserDeptAssocListResponse, err error)
}

type UserDeptAssocCURDHTTPClientImpl struct {
	cc *http.Client
}

func NewUserDeptAssocCURDHTTPClient(client *http.Client) UserDeptAssocCURDHTTPClient {
	return &UserDeptAssocCURDHTTPClientImpl{client}
}

func (c *UserDeptAssocCURDHTTPClientImpl) AddUserDeptAssoc(ctx context.Context, in *AddUserDeptAssocRequest, opts ...http.CallOption) (*AddUserDeptAssocResponse, error) {
	var out AddUserDeptAssocResponse
	pattern := "/user-dept-assoc"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserDeptAssocCURDAddUserDeptAssoc))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserDeptAssocCURDHTTPClientImpl) GetUserDeptAssocList(ctx context.Context, in *GetUserDeptAssocListRequest, opts ...http.CallOption) (*GetUserDeptAssocListResponse, error) {
	var out GetUserDeptAssocListResponse
	pattern := "/user-dept-assoc"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserDeptAssocCURDGetUserDeptAssocList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

const OperationUserJobCURDAddUserJob = "/api.UserJobCURD/AddUserJob"
const OperationUserJobCURDDelUserJobByIDList = "/api.UserJobCURD/DelUserJobByIDList"
const OperationUserJobCURDGetUserJobList = "/api.UserJobCURD/GetUserJobList"

type UserJobCURDHTTPServer interface {
	AddUserJob(context.Context, *AddUserJobRequest) (*AddUserJobResponse, error)
	// DelUserJobByIDList MARK 5 START 替换内容，没有索引的表，以替换的形式删除
	DelUserJobByIDList(context.Context, *DelUserJobByIDListRequest) (*Empty, error)
	GetUserJobList(context.Context, *GetUserJobListRequest) (*GetUserJobListResponse, error)
}

func RegisterUserJobCURDHTTPServer(s *http.Server, srv UserJobCURDHTTPServer) {
	r := s.Route("/")
	r.POST("/user-job", _UserJobCURD_AddUserJob0_HTTP_Handler(srv))
	r.GET("/user-job", _UserJobCURD_GetUserJobList0_HTTP_Handler(srv))
	r.DELETE("/user-job", _UserJobCURD_DelUserJobByIDList0_HTTP_Handler(srv))
}

func _UserJobCURD_AddUserJob0_HTTP_Handler(srv UserJobCURDHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddUserJobRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserJobCURDAddUserJob)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddUserJob(ctx, req.(*AddUserJobRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddUserJobResponse)
		return ctx.Result(200, reply)
	}
}

func _UserJobCURD_GetUserJobList0_HTTP_Handler(srv UserJobCURDHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserJobListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserJobCURDGetUserJobList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserJobList(ctx, req.(*GetUserJobListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserJobListResponse)
		return ctx.Result(200, reply)
	}
}

func _UserJobCURD_DelUserJobByIDList0_HTTP_Handler(srv UserJobCURDHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelUserJobByIDListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserJobCURDDelUserJobByIDList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelUserJobByIDList(ctx, req.(*DelUserJobByIDListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

type UserJobCURDHTTPClient interface {
	AddUserJob(ctx context.Context, req *AddUserJobRequest, opts ...http.CallOption) (rsp *AddUserJobResponse, err error)
	DelUserJobByIDList(ctx context.Context, req *DelUserJobByIDListRequest, opts ...http.CallOption) (rsp *Empty, err error)
	GetUserJobList(ctx context.Context, req *GetUserJobListRequest, opts ...http.CallOption) (rsp *GetUserJobListResponse, err error)
}

type UserJobCURDHTTPClientImpl struct {
	cc *http.Client
}

func NewUserJobCURDHTTPClient(client *http.Client) UserJobCURDHTTPClient {
	return &UserJobCURDHTTPClientImpl{client}
}

func (c *UserJobCURDHTTPClientImpl) AddUserJob(ctx context.Context, in *AddUserJobRequest, opts ...http.CallOption) (*AddUserJobResponse, error) {
	var out AddUserJobResponse
	pattern := "/user-job"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserJobCURDAddUserJob))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserJobCURDHTTPClientImpl) DelUserJobByIDList(ctx context.Context, in *DelUserJobByIDListRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/user-job"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserJobCURDDelUserJobByIDList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserJobCURDHTTPClientImpl) GetUserJobList(ctx context.Context, in *GetUserJobListRequest, opts ...http.CallOption) (*GetUserJobListResponse, error) {
	var out GetUserJobListResponse
	pattern := "/user-job"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserJobCURDGetUserJobList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
