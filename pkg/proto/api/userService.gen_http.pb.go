// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v3.21.9
// source: userService.gen.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserAddUser = "/api.User/AddUser"
const OperationUserDelUserByIds = "/api.User/DelUserByIds"
const OperationUserGetUserList = "/api.User/GetUserList"

type UserHTTPServer interface {
	AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error)
	// DelUserByIds MARK 5 START 替换内容，没有索引的表，以替换的形式删除
	DelUserByIds(context.Context, *DelUserByIdsRequest) (*Empty, error)
	GetUserList(context.Context, *GetUserListRequest) (*GetUserListResponse, error)
}

func RegisterUserHTTPServer(s *http.Server, srv UserHTTPServer) {
	r := s.Route("/")
	r.POST("/user", _User_AddUser0_HTTP_Handler(srv))
	r.GET("/user", _User_GetUserList0_HTTP_Handler(srv))
	r.DELETE("/user", _User_DelUserByIds0_HTTP_Handler(srv))
}

func _User_AddUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAddUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddUser(ctx, req.(*AddUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddUserResponse)
		return ctx.Result(200, reply)
	}
}

func _User_GetUserList0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetUserList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserList(ctx, req.(*GetUserListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserListResponse)
		return ctx.Result(200, reply)
	}
}

func _User_DelUserByIds0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelUserByIdsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserDelUserByIds)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelUserByIds(ctx, req.(*DelUserByIdsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

type UserHTTPClient interface {
	AddUser(ctx context.Context, req *AddUserRequest, opts ...http.CallOption) (rsp *AddUserResponse, err error)
	DelUserByIds(ctx context.Context, req *DelUserByIdsRequest, opts ...http.CallOption) (rsp *Empty, err error)
	GetUserList(ctx context.Context, req *GetUserListRequest, opts ...http.CallOption) (rsp *GetUserListResponse, err error)
}

type UserHTTPClientImpl struct {
	cc *http.Client
}

func NewUserHTTPClient(client *http.Client) UserHTTPClient {
	return &UserHTTPClientImpl{client}
}

func (c *UserHTTPClientImpl) AddUser(ctx context.Context, in *AddUserRequest, opts ...http.CallOption) (*AddUserResponse, error) {
	var out AddUserResponse
	pattern := "/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserAddUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) DelUserByIds(ctx context.Context, in *DelUserByIdsRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserDelUserByIds))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) GetUserList(ctx context.Context, in *GetUserListRequest, opts ...http.CallOption) (*GetUserListResponse, error) {
	var out GetUserListResponse
	pattern := "/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserGetUserList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

const OperationUserDeptAddUserDept = "/api.UserDept/AddUserDept"
const OperationUserDeptDelUserDeptByIds = "/api.UserDept/DelUserDeptByIds"
const OperationUserDeptGetUserDeptList = "/api.UserDept/GetUserDeptList"

type UserDeptHTTPServer interface {
	AddUserDept(context.Context, *AddUserDeptRequest) (*AddUserDeptResponse, error)
	// DelUserDeptByIds MARK 5 START 替换内容，没有索引的表，以替换的形式删除
	DelUserDeptByIds(context.Context, *DelUserDeptByIdsRequest) (*Empty, error)
	GetUserDeptList(context.Context, *GetUserDeptListRequest) (*GetUserDeptListResponse, error)
}

func RegisterUserDeptHTTPServer(s *http.Server, srv UserDeptHTTPServer) {
	r := s.Route("/")
	r.POST("/user-dept", _UserDept_AddUserDept0_HTTP_Handler(srv))
	r.GET("/user-dept", _UserDept_GetUserDeptList0_HTTP_Handler(srv))
	r.DELETE("/user-dept", _UserDept_DelUserDeptByIds0_HTTP_Handler(srv))
}

func _UserDept_AddUserDept0_HTTP_Handler(srv UserDeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddUserDeptRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserDeptAddUserDept)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddUserDept(ctx, req.(*AddUserDeptRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddUserDeptResponse)
		return ctx.Result(200, reply)
	}
}

func _UserDept_GetUserDeptList0_HTTP_Handler(srv UserDeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserDeptListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserDeptGetUserDeptList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserDeptList(ctx, req.(*GetUserDeptListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserDeptListResponse)
		return ctx.Result(200, reply)
	}
}

func _UserDept_DelUserDeptByIds0_HTTP_Handler(srv UserDeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelUserDeptByIdsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserDeptDelUserDeptByIds)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelUserDeptByIds(ctx, req.(*DelUserDeptByIdsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

type UserDeptHTTPClient interface {
	AddUserDept(ctx context.Context, req *AddUserDeptRequest, opts ...http.CallOption) (rsp *AddUserDeptResponse, err error)
	DelUserDeptByIds(ctx context.Context, req *DelUserDeptByIdsRequest, opts ...http.CallOption) (rsp *Empty, err error)
	GetUserDeptList(ctx context.Context, req *GetUserDeptListRequest, opts ...http.CallOption) (rsp *GetUserDeptListResponse, err error)
}

type UserDeptHTTPClientImpl struct {
	cc *http.Client
}

func NewUserDeptHTTPClient(client *http.Client) UserDeptHTTPClient {
	return &UserDeptHTTPClientImpl{client}
}

func (c *UserDeptHTTPClientImpl) AddUserDept(ctx context.Context, in *AddUserDeptRequest, opts ...http.CallOption) (*AddUserDeptResponse, error) {
	var out AddUserDeptResponse
	pattern := "/user-dept"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserDeptAddUserDept))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserDeptHTTPClientImpl) DelUserDeptByIds(ctx context.Context, in *DelUserDeptByIdsRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/user-dept"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserDeptDelUserDeptByIds))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserDeptHTTPClientImpl) GetUserDeptList(ctx context.Context, in *GetUserDeptListRequest, opts ...http.CallOption) (*GetUserDeptListResponse, error) {
	var out GetUserDeptListResponse
	pattern := "/user-dept"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserDeptGetUserDeptList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

const OperationUserDeptAssocAddUserDeptAssoc = "/api.UserDeptAssoc/AddUserDeptAssoc"
const OperationUserDeptAssocGetUserDeptAssocList = "/api.UserDeptAssoc/GetUserDeptAssocList"

type UserDeptAssocHTTPServer interface {
	AddUserDeptAssoc(context.Context, *AddUserDeptAssocRequest) (*AddUserDeptAssocResponse, error)
	GetUserDeptAssocList(context.Context, *GetUserDeptAssocListRequest) (*GetUserDeptAssocListResponse, error)
}

func RegisterUserDeptAssocHTTPServer(s *http.Server, srv UserDeptAssocHTTPServer) {
	r := s.Route("/")
	r.POST("/user-dept-assoc", _UserDeptAssoc_AddUserDeptAssoc0_HTTP_Handler(srv))
	r.GET("/user-dept-assoc", _UserDeptAssoc_GetUserDeptAssocList0_HTTP_Handler(srv))
}

func _UserDeptAssoc_AddUserDeptAssoc0_HTTP_Handler(srv UserDeptAssocHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddUserDeptAssocRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserDeptAssocAddUserDeptAssoc)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddUserDeptAssoc(ctx, req.(*AddUserDeptAssocRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddUserDeptAssocResponse)
		return ctx.Result(200, reply)
	}
}

func _UserDeptAssoc_GetUserDeptAssocList0_HTTP_Handler(srv UserDeptAssocHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserDeptAssocListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserDeptAssocGetUserDeptAssocList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserDeptAssocList(ctx, req.(*GetUserDeptAssocListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserDeptAssocListResponse)
		return ctx.Result(200, reply)
	}
}

type UserDeptAssocHTTPClient interface {
	AddUserDeptAssoc(ctx context.Context, req *AddUserDeptAssocRequest, opts ...http.CallOption) (rsp *AddUserDeptAssocResponse, err error)
	GetUserDeptAssocList(ctx context.Context, req *GetUserDeptAssocListRequest, opts ...http.CallOption) (rsp *GetUserDeptAssocListResponse, err error)
}

type UserDeptAssocHTTPClientImpl struct {
	cc *http.Client
}

func NewUserDeptAssocHTTPClient(client *http.Client) UserDeptAssocHTTPClient {
	return &UserDeptAssocHTTPClientImpl{client}
}

func (c *UserDeptAssocHTTPClientImpl) AddUserDeptAssoc(ctx context.Context, in *AddUserDeptAssocRequest, opts ...http.CallOption) (*AddUserDeptAssocResponse, error) {
	var out AddUserDeptAssocResponse
	pattern := "/user-dept-assoc"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserDeptAssocAddUserDeptAssoc))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserDeptAssocHTTPClientImpl) GetUserDeptAssocList(ctx context.Context, in *GetUserDeptAssocListRequest, opts ...http.CallOption) (*GetUserDeptAssocListResponse, error) {
	var out GetUserDeptAssocListResponse
	pattern := "/user-dept-assoc"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserDeptAssocGetUserDeptAssocList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

const OperationUserJobAddUserJob = "/api.UserJob/AddUserJob"
const OperationUserJobDelUserJobByIds = "/api.UserJob/DelUserJobByIds"
const OperationUserJobGetUserJobList = "/api.UserJob/GetUserJobList"

type UserJobHTTPServer interface {
	AddUserJob(context.Context, *AddUserJobRequest) (*AddUserJobResponse, error)
	// DelUserJobByIds MARK 5 START 替换内容，没有索引的表，以替换的形式删除
	DelUserJobByIds(context.Context, *DelUserJobByIdsRequest) (*Empty, error)
	GetUserJobList(context.Context, *GetUserJobListRequest) (*GetUserJobListResponse, error)
}

func RegisterUserJobHTTPServer(s *http.Server, srv UserJobHTTPServer) {
	r := s.Route("/")
	r.POST("/user-job", _UserJob_AddUserJob0_HTTP_Handler(srv))
	r.GET("/user-job", _UserJob_GetUserJobList0_HTTP_Handler(srv))
	r.DELETE("/user-job", _UserJob_DelUserJobByIds0_HTTP_Handler(srv))
}

func _UserJob_AddUserJob0_HTTP_Handler(srv UserJobHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddUserJobRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserJobAddUserJob)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddUserJob(ctx, req.(*AddUserJobRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddUserJobResponse)
		return ctx.Result(200, reply)
	}
}

func _UserJob_GetUserJobList0_HTTP_Handler(srv UserJobHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserJobListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserJobGetUserJobList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserJobList(ctx, req.(*GetUserJobListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserJobListResponse)
		return ctx.Result(200, reply)
	}
}

func _UserJob_DelUserJobByIds0_HTTP_Handler(srv UserJobHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelUserJobByIdsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserJobDelUserJobByIds)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelUserJobByIds(ctx, req.(*DelUserJobByIdsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

type UserJobHTTPClient interface {
	AddUserJob(ctx context.Context, req *AddUserJobRequest, opts ...http.CallOption) (rsp *AddUserJobResponse, err error)
	DelUserJobByIds(ctx context.Context, req *DelUserJobByIdsRequest, opts ...http.CallOption) (rsp *Empty, err error)
	GetUserJobList(ctx context.Context, req *GetUserJobListRequest, opts ...http.CallOption) (rsp *GetUserJobListResponse, err error)
}

type UserJobHTTPClientImpl struct {
	cc *http.Client
}

func NewUserJobHTTPClient(client *http.Client) UserJobHTTPClient {
	return &UserJobHTTPClientImpl{client}
}

func (c *UserJobHTTPClientImpl) AddUserJob(ctx context.Context, in *AddUserJobRequest, opts ...http.CallOption) (*AddUserJobResponse, error) {
	var out AddUserJobResponse
	pattern := "/user-job"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserJobAddUserJob))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserJobHTTPClientImpl) DelUserJobByIds(ctx context.Context, in *DelUserJobByIdsRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/user-job"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserJobDelUserJobByIds))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserJobHTTPClientImpl) GetUserJobList(ctx context.Context, in *GetUserJobListRequest, opts ...http.CallOption) (*GetUserJobListResponse, error) {
	var out GetUserJobListResponse
	pattern := "/user-job"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserJobGetUserJobList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
