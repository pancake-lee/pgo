// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v5.28.1
// source: schoolService.gen.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSchoolCURDAddCourseSwapRequest = "/api.schoolCURD/AddCourseSwapRequest"
const OperationSchoolCURDDelCourseSwapRequestByIDList = "/api.schoolCURD/DelCourseSwapRequestByIDList"
const OperationSchoolCURDGetCourseSwapRequestList = "/api.schoolCURD/GetCourseSwapRequestList"

type SchoolCURDHTTPServer interface {
	// AddCourseSwapRequest --------------------------------------------------
	// tbl : course_swap_request
	AddCourseSwapRequest(context.Context, *AddCourseSwapRequestRequest) (*AddCourseSwapRequestResponse, error)
	DelCourseSwapRequestByIDList(context.Context, *DelCourseSwapRequestByIDListRequest) (*Empty, error)
	GetCourseSwapRequestList(context.Context, *GetCourseSwapRequestListRequest) (*GetCourseSwapRequestListResponse, error)
}

func RegisterSchoolCURDHTTPServer(s *http.Server, srv SchoolCURDHTTPServer) {
	r := s.Route("/")
	r.POST("/course-swap-request", _SchoolCURD_AddCourseSwapRequest0_HTTP_Handler(srv))
	r.GET("/course-swap-request", _SchoolCURD_GetCourseSwapRequestList0_HTTP_Handler(srv))
	r.DELETE("/course-swap-request", _SchoolCURD_DelCourseSwapRequestByIDList0_HTTP_Handler(srv))
}

func _SchoolCURD_AddCourseSwapRequest0_HTTP_Handler(srv SchoolCURDHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddCourseSwapRequestRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSchoolCURDAddCourseSwapRequest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddCourseSwapRequest(ctx, req.(*AddCourseSwapRequestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddCourseSwapRequestResponse)
		return ctx.Result(200, reply)
	}
}

func _SchoolCURD_GetCourseSwapRequestList0_HTTP_Handler(srv SchoolCURDHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCourseSwapRequestListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSchoolCURDGetCourseSwapRequestList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCourseSwapRequestList(ctx, req.(*GetCourseSwapRequestListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCourseSwapRequestListResponse)
		return ctx.Result(200, reply)
	}
}

func _SchoolCURD_DelCourseSwapRequestByIDList0_HTTP_Handler(srv SchoolCURDHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelCourseSwapRequestByIDListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSchoolCURDDelCourseSwapRequestByIDList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelCourseSwapRequestByIDList(ctx, req.(*DelCourseSwapRequestByIDListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

type SchoolCURDHTTPClient interface {
	AddCourseSwapRequest(ctx context.Context, req *AddCourseSwapRequestRequest, opts ...http.CallOption) (rsp *AddCourseSwapRequestResponse, err error)
	DelCourseSwapRequestByIDList(ctx context.Context, req *DelCourseSwapRequestByIDListRequest, opts ...http.CallOption) (rsp *Empty, err error)
	GetCourseSwapRequestList(ctx context.Context, req *GetCourseSwapRequestListRequest, opts ...http.CallOption) (rsp *GetCourseSwapRequestListResponse, err error)
}

type SchoolCURDHTTPClientImpl struct {
	cc *http.Client
}

func NewSchoolCURDHTTPClient(client *http.Client) SchoolCURDHTTPClient {
	return &SchoolCURDHTTPClientImpl{client}
}

func (c *SchoolCURDHTTPClientImpl) AddCourseSwapRequest(ctx context.Context, in *AddCourseSwapRequestRequest, opts ...http.CallOption) (*AddCourseSwapRequestResponse, error) {
	var out AddCourseSwapRequestResponse
	pattern := "/course-swap-request"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSchoolCURDAddCourseSwapRequest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SchoolCURDHTTPClientImpl) DelCourseSwapRequestByIDList(ctx context.Context, in *DelCourseSwapRequestByIDListRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/course-swap-request"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSchoolCURDDelCourseSwapRequestByIDList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SchoolCURDHTTPClientImpl) GetCourseSwapRequestList(ctx context.Context, in *GetCourseSwapRequestListRequest, opts ...http.CallOption) (*GetCourseSwapRequestListResponse, error) {
	var out GetCourseSwapRequestListResponse
	pattern := "/course-swap-request"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSchoolCURDGetCourseSwapRequestList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
