// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v5.28.1
// source: abandonCode.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAbandonCodeCURDAddAbandonCode = "/api.abandonCodeCURD/AddAbandonCode"
const OperationAbandonCodeCURDDelAbandonCodeByIdx1List = "/api.abandonCodeCURD/DelAbandonCodeByIdx1List"
const OperationAbandonCodeCURDGetAbandonCodeList = "/api.abandonCodeCURD/GetAbandonCodeList"

type AbandonCodeCURDHTTPServer interface {
	// AddAbandonCode MARK REPEAT API START 一个表的接口定义
	// --------------------------------------------------
	// tbl : abandon_code
	AddAbandonCode(context.Context, *AddAbandonCodeRequest) (*AddAbandonCodeResponse, error)
	// DelAbandonCodeByIdx1List MARK REMOVE IF NO PRIMARY KEY START
	DelAbandonCodeByIdx1List(context.Context, *DelAbandonCodeByIdx1ListRequest) (*Empty, error)
	GetAbandonCodeList(context.Context, *GetAbandonCodeListRequest) (*GetAbandonCodeListResponse, error)
}

func RegisterAbandonCodeCURDHTTPServer(s *http.Server, srv AbandonCodeCURDHTTPServer) {
	r := s.Route("/")
	r.POST("/abandon-code", _AbandonCodeCURD_AddAbandonCode0_HTTP_Handler(srv))
	r.GET("/abandon-code", _AbandonCodeCURD_GetAbandonCodeList0_HTTP_Handler(srv))
	r.DELETE("/abandon-code", _AbandonCodeCURD_DelAbandonCodeByIdx1List0_HTTP_Handler(srv))
}

func _AbandonCodeCURD_AddAbandonCode0_HTTP_Handler(srv AbandonCodeCURDHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddAbandonCodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAbandonCodeCURDAddAbandonCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddAbandonCode(ctx, req.(*AddAbandonCodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddAbandonCodeResponse)
		return ctx.Result(200, reply)
	}
}

func _AbandonCodeCURD_GetAbandonCodeList0_HTTP_Handler(srv AbandonCodeCURDHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAbandonCodeListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAbandonCodeCURDGetAbandonCodeList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAbandonCodeList(ctx, req.(*GetAbandonCodeListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAbandonCodeListResponse)
		return ctx.Result(200, reply)
	}
}

func _AbandonCodeCURD_DelAbandonCodeByIdx1List0_HTTP_Handler(srv AbandonCodeCURDHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelAbandonCodeByIdx1ListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAbandonCodeCURDDelAbandonCodeByIdx1List)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelAbandonCodeByIdx1List(ctx, req.(*DelAbandonCodeByIdx1ListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

type AbandonCodeCURDHTTPClient interface {
	AddAbandonCode(ctx context.Context, req *AddAbandonCodeRequest, opts ...http.CallOption) (rsp *AddAbandonCodeResponse, err error)
	DelAbandonCodeByIdx1List(ctx context.Context, req *DelAbandonCodeByIdx1ListRequest, opts ...http.CallOption) (rsp *Empty, err error)
	GetAbandonCodeList(ctx context.Context, req *GetAbandonCodeListRequest, opts ...http.CallOption) (rsp *GetAbandonCodeListResponse, err error)
}

type AbandonCodeCURDHTTPClientImpl struct {
	cc *http.Client
}

func NewAbandonCodeCURDHTTPClient(client *http.Client) AbandonCodeCURDHTTPClient {
	return &AbandonCodeCURDHTTPClientImpl{client}
}

func (c *AbandonCodeCURDHTTPClientImpl) AddAbandonCode(ctx context.Context, in *AddAbandonCodeRequest, opts ...http.CallOption) (*AddAbandonCodeResponse, error) {
	var out AddAbandonCodeResponse
	pattern := "/abandon-code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAbandonCodeCURDAddAbandonCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AbandonCodeCURDHTTPClientImpl) DelAbandonCodeByIdx1List(ctx context.Context, in *DelAbandonCodeByIdx1ListRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/abandon-code"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAbandonCodeCURDDelAbandonCodeByIdx1List))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AbandonCodeCURDHTTPClientImpl) GetAbandonCodeList(ctx context.Context, in *GetAbandonCodeListRequest, opts ...http.CallOption) (*GetAbandonCodeListResponse, error) {
	var out GetAbandonCodeListResponse
	pattern := "/abandon-code"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAbandonCodeCURDGetAbandonCodeList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
