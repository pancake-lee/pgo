// Code generated by tools/genCURD. DO NOT EDIT.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: userService.gen.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_AddUser_FullMethodName      = "/api.User/AddUser"
	User_GetUserList_FullMethodName  = "/api.User/GetUserList"
	User_DelUserByIds_FullMethodName = "/api.User/DelUserByIds"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
	GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListResponse, error)
	// MARK 5 START 替换内容，没有索引的表，以替换的形式删除
	DelUserByIds(ctx context.Context, in *DelUserByIdsRequest, opts ...grpc.CallOption) (*Empty, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := c.cc.Invoke(ctx, User_AddUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListResponse, error) {
	out := new(GetUserListResponse)
	err := c.cc.Invoke(ctx, User_GetUserList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelUserByIds(ctx context.Context, in *DelUserByIdsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, User_DelUserByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error)
	GetUserList(context.Context, *GetUserListRequest) (*GetUserListResponse, error)
	// MARK 5 START 替换内容，没有索引的表，以替换的形式删除
	DelUserByIds(context.Context, *DelUserByIdsRequest) (*Empty, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserServer) GetUserList(context.Context, *GetUserListRequest) (*GetUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedUserServer) DelUserByIds(context.Context, *DelUserByIdsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserByIds not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserList(ctx, req.(*GetUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelUserByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelUserByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DelUserByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelUserByIds(ctx, req.(*DelUserByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _User_AddUser_Handler,
		},
		{
			MethodName: "GetUserList",
			Handler:    _User_GetUserList_Handler,
		},
		{
			MethodName: "DelUserByIds",
			Handler:    _User_DelUserByIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userService.gen.proto",
}

const (
	UserDept_AddUserDept_FullMethodName      = "/api.UserDept/AddUserDept"
	UserDept_GetUserDeptList_FullMethodName  = "/api.UserDept/GetUserDeptList"
	UserDept_DelUserDeptByIds_FullMethodName = "/api.UserDept/DelUserDeptByIds"
)

// UserDeptClient is the client API for UserDept service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDeptClient interface {
	AddUserDept(ctx context.Context, in *AddUserDeptRequest, opts ...grpc.CallOption) (*AddUserDeptResponse, error)
	GetUserDeptList(ctx context.Context, in *GetUserDeptListRequest, opts ...grpc.CallOption) (*GetUserDeptListResponse, error)
	// MARK 5 START 替换内容，没有索引的表，以替换的形式删除
	DelUserDeptByIds(ctx context.Context, in *DelUserDeptByIdsRequest, opts ...grpc.CallOption) (*Empty, error)
}

type userDeptClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDeptClient(cc grpc.ClientConnInterface) UserDeptClient {
	return &userDeptClient{cc}
}

func (c *userDeptClient) AddUserDept(ctx context.Context, in *AddUserDeptRequest, opts ...grpc.CallOption) (*AddUserDeptResponse, error) {
	out := new(AddUserDeptResponse)
	err := c.cc.Invoke(ctx, UserDept_AddUserDept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeptClient) GetUserDeptList(ctx context.Context, in *GetUserDeptListRequest, opts ...grpc.CallOption) (*GetUserDeptListResponse, error) {
	out := new(GetUserDeptListResponse)
	err := c.cc.Invoke(ctx, UserDept_GetUserDeptList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeptClient) DelUserDeptByIds(ctx context.Context, in *DelUserDeptByIdsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserDept_DelUserDeptByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDeptServer is the server API for UserDept service.
// All implementations must embed UnimplementedUserDeptServer
// for forward compatibility
type UserDeptServer interface {
	AddUserDept(context.Context, *AddUserDeptRequest) (*AddUserDeptResponse, error)
	GetUserDeptList(context.Context, *GetUserDeptListRequest) (*GetUserDeptListResponse, error)
	// MARK 5 START 替换内容，没有索引的表，以替换的形式删除
	DelUserDeptByIds(context.Context, *DelUserDeptByIdsRequest) (*Empty, error)
	mustEmbedUnimplementedUserDeptServer()
}

// UnimplementedUserDeptServer must be embedded to have forward compatible implementations.
type UnimplementedUserDeptServer struct {
}

func (UnimplementedUserDeptServer) AddUserDept(context.Context, *AddUserDeptRequest) (*AddUserDeptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserDept not implemented")
}
func (UnimplementedUserDeptServer) GetUserDeptList(context.Context, *GetUserDeptListRequest) (*GetUserDeptListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDeptList not implemented")
}
func (UnimplementedUserDeptServer) DelUserDeptByIds(context.Context, *DelUserDeptByIdsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserDeptByIds not implemented")
}
func (UnimplementedUserDeptServer) mustEmbedUnimplementedUserDeptServer() {}

// UnsafeUserDeptServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDeptServer will
// result in compilation errors.
type UnsafeUserDeptServer interface {
	mustEmbedUnimplementedUserDeptServer()
}

func RegisterUserDeptServer(s grpc.ServiceRegistrar, srv UserDeptServer) {
	s.RegisterService(&UserDept_ServiceDesc, srv)
}

func _UserDept_AddUserDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeptServer).AddUserDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDept_AddUserDept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeptServer).AddUserDept(ctx, req.(*AddUserDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDept_GetUserDeptList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDeptListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeptServer).GetUserDeptList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDept_GetUserDeptList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeptServer).GetUserDeptList(ctx, req.(*GetUserDeptListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDept_DelUserDeptByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserDeptByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeptServer).DelUserDeptByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDept_DelUserDeptByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeptServer).DelUserDeptByIds(ctx, req.(*DelUserDeptByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDept_ServiceDesc is the grpc.ServiceDesc for UserDept service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDept_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.UserDept",
	HandlerType: (*UserDeptServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUserDept",
			Handler:    _UserDept_AddUserDept_Handler,
		},
		{
			MethodName: "GetUserDeptList",
			Handler:    _UserDept_GetUserDeptList_Handler,
		},
		{
			MethodName: "DelUserDeptByIds",
			Handler:    _UserDept_DelUserDeptByIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userService.gen.proto",
}

const (
	UserDeptAssoc_AddUserDeptAssoc_FullMethodName     = "/api.UserDeptAssoc/AddUserDeptAssoc"
	UserDeptAssoc_GetUserDeptAssocList_FullMethodName = "/api.UserDeptAssoc/GetUserDeptAssocList"
)

// UserDeptAssocClient is the client API for UserDeptAssoc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDeptAssocClient interface {
	AddUserDeptAssoc(ctx context.Context, in *AddUserDeptAssocRequest, opts ...grpc.CallOption) (*AddUserDeptAssocResponse, error)
	GetUserDeptAssocList(ctx context.Context, in *GetUserDeptAssocListRequest, opts ...grpc.CallOption) (*GetUserDeptAssocListResponse, error)
}

type userDeptAssocClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDeptAssocClient(cc grpc.ClientConnInterface) UserDeptAssocClient {
	return &userDeptAssocClient{cc}
}

func (c *userDeptAssocClient) AddUserDeptAssoc(ctx context.Context, in *AddUserDeptAssocRequest, opts ...grpc.CallOption) (*AddUserDeptAssocResponse, error) {
	out := new(AddUserDeptAssocResponse)
	err := c.cc.Invoke(ctx, UserDeptAssoc_AddUserDeptAssoc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeptAssocClient) GetUserDeptAssocList(ctx context.Context, in *GetUserDeptAssocListRequest, opts ...grpc.CallOption) (*GetUserDeptAssocListResponse, error) {
	out := new(GetUserDeptAssocListResponse)
	err := c.cc.Invoke(ctx, UserDeptAssoc_GetUserDeptAssocList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDeptAssocServer is the server API for UserDeptAssoc service.
// All implementations must embed UnimplementedUserDeptAssocServer
// for forward compatibility
type UserDeptAssocServer interface {
	AddUserDeptAssoc(context.Context, *AddUserDeptAssocRequest) (*AddUserDeptAssocResponse, error)
	GetUserDeptAssocList(context.Context, *GetUserDeptAssocListRequest) (*GetUserDeptAssocListResponse, error)
	mustEmbedUnimplementedUserDeptAssocServer()
}

// UnimplementedUserDeptAssocServer must be embedded to have forward compatible implementations.
type UnimplementedUserDeptAssocServer struct {
}

func (UnimplementedUserDeptAssocServer) AddUserDeptAssoc(context.Context, *AddUserDeptAssocRequest) (*AddUserDeptAssocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserDeptAssoc not implemented")
}
func (UnimplementedUserDeptAssocServer) GetUserDeptAssocList(context.Context, *GetUserDeptAssocListRequest) (*GetUserDeptAssocListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDeptAssocList not implemented")
}
func (UnimplementedUserDeptAssocServer) mustEmbedUnimplementedUserDeptAssocServer() {}

// UnsafeUserDeptAssocServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDeptAssocServer will
// result in compilation errors.
type UnsafeUserDeptAssocServer interface {
	mustEmbedUnimplementedUserDeptAssocServer()
}

func RegisterUserDeptAssocServer(s grpc.ServiceRegistrar, srv UserDeptAssocServer) {
	s.RegisterService(&UserDeptAssoc_ServiceDesc, srv)
}

func _UserDeptAssoc_AddUserDeptAssoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserDeptAssocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeptAssocServer).AddUserDeptAssoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDeptAssoc_AddUserDeptAssoc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeptAssocServer).AddUserDeptAssoc(ctx, req.(*AddUserDeptAssocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDeptAssoc_GetUserDeptAssocList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDeptAssocListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeptAssocServer).GetUserDeptAssocList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDeptAssoc_GetUserDeptAssocList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeptAssocServer).GetUserDeptAssocList(ctx, req.(*GetUserDeptAssocListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDeptAssoc_ServiceDesc is the grpc.ServiceDesc for UserDeptAssoc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDeptAssoc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.UserDeptAssoc",
	HandlerType: (*UserDeptAssocServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUserDeptAssoc",
			Handler:    _UserDeptAssoc_AddUserDeptAssoc_Handler,
		},
		{
			MethodName: "GetUserDeptAssocList",
			Handler:    _UserDeptAssoc_GetUserDeptAssocList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userService.gen.proto",
}

const (
	UserJob_AddUserJob_FullMethodName      = "/api.UserJob/AddUserJob"
	UserJob_GetUserJobList_FullMethodName  = "/api.UserJob/GetUserJobList"
	UserJob_DelUserJobByIds_FullMethodName = "/api.UserJob/DelUserJobByIds"
)

// UserJobClient is the client API for UserJob service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserJobClient interface {
	AddUserJob(ctx context.Context, in *AddUserJobRequest, opts ...grpc.CallOption) (*AddUserJobResponse, error)
	GetUserJobList(ctx context.Context, in *GetUserJobListRequest, opts ...grpc.CallOption) (*GetUserJobListResponse, error)
	// MARK 5 START 替换内容，没有索引的表，以替换的形式删除
	DelUserJobByIds(ctx context.Context, in *DelUserJobByIdsRequest, opts ...grpc.CallOption) (*Empty, error)
}

type userJobClient struct {
	cc grpc.ClientConnInterface
}

func NewUserJobClient(cc grpc.ClientConnInterface) UserJobClient {
	return &userJobClient{cc}
}

func (c *userJobClient) AddUserJob(ctx context.Context, in *AddUserJobRequest, opts ...grpc.CallOption) (*AddUserJobResponse, error) {
	out := new(AddUserJobResponse)
	err := c.cc.Invoke(ctx, UserJob_AddUserJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userJobClient) GetUserJobList(ctx context.Context, in *GetUserJobListRequest, opts ...grpc.CallOption) (*GetUserJobListResponse, error) {
	out := new(GetUserJobListResponse)
	err := c.cc.Invoke(ctx, UserJob_GetUserJobList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userJobClient) DelUserJobByIds(ctx context.Context, in *DelUserJobByIdsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserJob_DelUserJobByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserJobServer is the server API for UserJob service.
// All implementations must embed UnimplementedUserJobServer
// for forward compatibility
type UserJobServer interface {
	AddUserJob(context.Context, *AddUserJobRequest) (*AddUserJobResponse, error)
	GetUserJobList(context.Context, *GetUserJobListRequest) (*GetUserJobListResponse, error)
	// MARK 5 START 替换内容，没有索引的表，以替换的形式删除
	DelUserJobByIds(context.Context, *DelUserJobByIdsRequest) (*Empty, error)
	mustEmbedUnimplementedUserJobServer()
}

// UnimplementedUserJobServer must be embedded to have forward compatible implementations.
type UnimplementedUserJobServer struct {
}

func (UnimplementedUserJobServer) AddUserJob(context.Context, *AddUserJobRequest) (*AddUserJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserJob not implemented")
}
func (UnimplementedUserJobServer) GetUserJobList(context.Context, *GetUserJobListRequest) (*GetUserJobListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserJobList not implemented")
}
func (UnimplementedUserJobServer) DelUserJobByIds(context.Context, *DelUserJobByIdsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserJobByIds not implemented")
}
func (UnimplementedUserJobServer) mustEmbedUnimplementedUserJobServer() {}

// UnsafeUserJobServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserJobServer will
// result in compilation errors.
type UnsafeUserJobServer interface {
	mustEmbedUnimplementedUserJobServer()
}

func RegisterUserJobServer(s grpc.ServiceRegistrar, srv UserJobServer) {
	s.RegisterService(&UserJob_ServiceDesc, srv)
}

func _UserJob_AddUserJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserJobServer).AddUserJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserJob_AddUserJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserJobServer).AddUserJob(ctx, req.(*AddUserJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserJob_GetUserJobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserJobListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserJobServer).GetUserJobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserJob_GetUserJobList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserJobServer).GetUserJobList(ctx, req.(*GetUserJobListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserJob_DelUserJobByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserJobByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserJobServer).DelUserJobByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserJob_DelUserJobByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserJobServer).DelUserJobByIds(ctx, req.(*DelUserJobByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserJob_ServiceDesc is the grpc.ServiceDesc for UserJob service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserJob_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.UserJob",
	HandlerType: (*UserJobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUserJob",
			Handler:    _UserJob_AddUserJob_Handler,
		},
		{
			MethodName: "GetUserJobList",
			Handler:    _UserJob_GetUserJobList_Handler,
		},
		{
			MethodName: "DelUserJobByIds",
			Handler:    _UserJob_DelUserJobByIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userService.gen.proto",
}
