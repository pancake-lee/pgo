// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v5.28.1
// source: schoolService.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSchoolGetAllCourseSwapRequestList = "/api.school/GetAllCourseSwapRequestList"

type SchoolHTTPServer interface {
	// GetAllCourseSwapRequestList --------------------------------------------------
	GetAllCourseSwapRequestList(context.Context, *GetAllCourseSwapRequestListRequest) (*GetAllCourseSwapRequestListResponse, error)
}

func RegisterSchoolHTTPServer(s *http.Server, srv SchoolHTTPServer) {
	r := s.Route("/")
	r.GET("/course-swap-request/all", _School_GetAllCourseSwapRequestList0_HTTP_Handler(srv))
}

func _School_GetAllCourseSwapRequestList0_HTTP_Handler(srv SchoolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAllCourseSwapRequestListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSchoolGetAllCourseSwapRequestList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAllCourseSwapRequestList(ctx, req.(*GetAllCourseSwapRequestListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAllCourseSwapRequestListResponse)
		return ctx.Result(200, reply)
	}
}

type SchoolHTTPClient interface {
	GetAllCourseSwapRequestList(ctx context.Context, req *GetAllCourseSwapRequestListRequest, opts ...http.CallOption) (rsp *GetAllCourseSwapRequestListResponse, err error)
}

type SchoolHTTPClientImpl struct {
	cc *http.Client
}

func NewSchoolHTTPClient(client *http.Client) SchoolHTTPClient {
	return &SchoolHTTPClientImpl{client}
}

func (c *SchoolHTTPClientImpl) GetAllCourseSwapRequestList(ctx context.Context, in *GetAllCourseSwapRequestListRequest, opts ...http.CallOption) (*GetAllCourseSwapRequestListResponse, error) {
	var out GetAllCourseSwapRequestListResponse
	pattern := "/course-swap-request/all"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSchoolGetAllCourseSwapRequestList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
